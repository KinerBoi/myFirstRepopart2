{
  
    
        "post0": {
            "title": "Hello World in Python",
            "content": "print(&quot;Hello World&quot;); . Hello World .",
            "url": "https://kinerboi.github.io/myFirstRepopart2/cb/2022/11/08/.08.21-Hello-World.html",
            "relUrl": "/cb/2022/11/08/.08.21-Hello-World.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Hello World in Java",
            "content": "System.out.println(&quot;Hello World&quot;) . Hello World .",
            "url": "https://kinerboi.github.io/myFirstRepopart2/cb/2022/11/08/.08.21-Hello-Java-World.html",
            "relUrl": "/cb/2022/11/08/.08.21-Hello-Java-World.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Unit 1 Trimester Review",
            "content": "Unit 1 . Primitives (int, char,double,bool) vs Object (String, other classes) | Primitives only have value, Objects have properties Homework: We did this unit, so no HW needed to be done | . Unit 2 . Object is a created instance in a class with a constructor (thing which helps create and define instances) | Static methods and properties based on class, cannot be used in other classes | Methods can have more than 1 parameter, as long as the types and name of them are different | Homework: https://kinerboi.github.io/myFirstRepopart2/2022/10/23/Unit2HW.html | . Unit 3 . Booleans store true or false | Can be generated with comaprisons (==,&gt;,&lt;,&gt;=,&lt;= | if statements take boolean conditional and do code based on such | else if/else statements can expand code | De Morgan&#39;s Law (!(a &amp;&amp; b) = !a || !b) AND (!(a || b) = !a &amp;&amp; !b) | Homework: https://kinerboi.github.io/myFirstRepopart2/2022/10/24/Unit3.html | . Unit 4 . While loop runs WHILE a boolean coditional is true | For loops iterate and increase in loops throghout until conditional value is met | Enhanced for loops can iterate though all values of an arrary, but that value cant be changed | Homework: https://kinerboi.github.io/myFirstRepopart2/2022/10/23/Unit4HW.html | . Unit 5 . Classes used to create objects, have properties and methods Properties stre info about class, can be made public (accessible thoghout code) or private (accessible in class only) | Methods modify object | . | Getters/Setters can be used to retrieve data from a private class | Homework: https://kinerboi.github.io/myFirstRepopart2/2022/10/20/Class.html | . Unit 6 . Arrays can be used to store multiple rows/columns of dats | Initialized as (type NameOfArray[]) | Can be iterated through using For Loops | Homework: https://kinerboi.github.io/myFirstRepopart2/2022/10/20/Unit6HW.html | . Unit 1 MC Test corrections . Here I will say my score and my views on it, do test corrections, and overall review what I got wrong. . Score . I got a 15/40 the first time taking the 2014 AP CSA Practice MC. That is not a good score, and I am not satisfied with it. I thoughts on this score will be stated once I review the questions which I got wrong . Question 7 . !/myFirstRepopart2(/images/Question-7-2014.png) . This question was a silly mistake. I did not read the part under where a new object student was created from the Class person. It makes sense now why the answer to this question would be D, and not E . Question 8 . !/myFirstRepopart2(/images/Question-8-2014.png) . This question was also a silly mistake. Option 1 should also have worked, because it still initializes a new object in the class even though no parameters are passed. Thus, the right answer should be C instead of B . Question 9 . !/myFirstRepopart2(/images/Question-9-2014.png) . This question was also a silly mistake. The reason that it would have been B instead of C, is because when iterating in this case i starts at 1 instead of 0, so in order to iterate the whole array the array index must be i-1 . Question 10 (Need to review!) . !/myFirstRepopart2(/images/Question-10-2014.png) . This question was kind of confusing when I first saw it, but afterword reading the explaination it made a lot of sense. If there is no value of 5 in the array, then the sequence will eventually throw an ArrayIndexOutOfBoundsException. As such, the answer will be B. . Question 11 . !/myFirstRepopart2(/images/Question-11-2014.png) . This question makes a lot more sense once you realize the wording of the previous question, so it is kind of a silly mistake but also not at the same time. In order to not return a ArrayIndexOutOfBoundsException, you can make an if conditional that once all the data is gone through, if a particular number last isnt there, then it just returns -1 or false. As such, the correct answer would indeed be B. . Question 12 . !/myFirstRepopart2(/images/Question-12-2014.png) . This question was a silly mistake. As incrementing by k+1 will get the k values of 1,3,5,and 7 being less than 8 (the word length for computer), and the second part where output (k is added by one) returns all of the values of string[1],string[3],string[5],and string[7], thus outputting &quot;optr&quot;. . Question 14 (Need to review!) . !/myFirstRepopart2(/images/Question-14-2014.png) . This question did not make sense at first, but after reading the explaination makes a lot of sense. As Vehicle v is supposed be a particular vehicle in the ArrayList myVehicles, you are only returning the mileage of the specific vehicle, and the syntax of my initial choice doesnt even make sense. As such, E should be the right answer . Question 15 . !/myFirstRepopart2(/images/Question-15-2014.png) . This question is definetly a silly mistake. The reason that Option 2 doest work, is because by starting the iteration of the for loop at 0 and all the way to data.length, the data would be iterating to an extra value that does not really exist, and therefore an error would be thrown up. . Question 16 (Need to review!) . !/myFirstRepopart2(/images/Question-16-2014.png) . This question did not make sense when first doing it, but when reading the explaination kind of makes sense. As the second array is trying to be returned after the first array, you must add the length of the first array in order to do that. . Question 17 . !/myFirstRepopart2(/images/Question-17-2014.png) . This question is a silly mistake. As k starts at index 3 instead at 0, the only numbers which would be changed are from 4 and up. The last 7 would remain because the loop terminates after the 6 before is turned into a 7, making the final values {1,2,3,5,6,7,7}. Thereforce, C is the right answer . Question 18 . !/myFirstRepopart2(/images/Question-18-2014.png) . The question didnt make sense at first, but after reading it makes sense. As the beginning of any array index is 0, by subrtracting -1 from the array index you have a value which doesnt exist, resulting in an error. Thus, B is the right answer. . Question 19 (Need to review!) . !/myFirstRepopart2(/images/Question-19-2014.png) . This is essentially a question on DeMortgan&#39;s Law, the two ! cancel out the first condition making it the same, but the !(b &gt; 7) translates to (b &lt;= 7). Therefore, B is the right answer. . Question 22 . !/myFirstRepopart2(/images/Question-22-2014.png) . This was a silly mistake. I did not notice that the method pagesPerMinute was under the extended class AudioBooks, and not in the parent class Books. As it was a method under the AudioBooks extended class, it makes sense that Line 4 would be an error because it is pagesPerMinute is accessed through Books, which cant happen. Thus, the correct answer has to be B. . Question 24 (Need to review!) . !/myFirstRepopart2(/images/Question-24-2014.png) . This required conceptual understanding of 2D arrays, something which I need to brush up on. The reason the answer here is D, or 7, is because while int value = old array, the code iterates through row numbers until it mods to 0, until when the if loop is reset and the column array is incremented. By the time that the code finishes, the values will look lke {1,4,7} {2,5,8} and {3,6,9}. As by printing out the value [0][2] means printing the first row and third column in that row, the value printed will indeed be 7. This is a topic that I do indeed need to refresh upon and master . Question 25 . !/myFirstRepopart2(/images/Question-25-2014.png) . This question was a silly mistake. Option I would still be correct, because it fetches the values of the length height and width of the smaller box, which can be compared with to the larger box later in the code; it does not neccessarily have to be written in that class. Therefore, Option I would also work alongside with Option II in order to figure that out, making D the right answer . Question 26 . !/myFirstRepopart2(/images/Question-26-2014.png) . This question is probably the biggest silly mistake I have made so far. As k is an array index, it could still be odd and printed out, which ruins the whole point of the code. In order to avoid that, one could use an enhanced for loop to assign every value in arr[] to x, and if those values (x) have no remainder when divided by 2(therefore even), then they are printed out. . Question 27 . !/myFirstRepopart2(/images/Question-27-2014.png) . This questuon was a silly mistake. As the conditional states that the code will run as long as n &lt; 2, and n is inputed as 6, that means that the code will run like this 4 times x = 1 y = 1 x = x + y y = x - y . n = 6 x = 1+1 =2 y = 2-1 = 1 . n = 5 x = 2+1 = 3 y = 3-1 = 2 . n = 4 x = 3 + 2 = 5 y = 5 - 2 = 3 . n = 3 x = 5 + 3 = 8 y = 8 - 3 = 5 . Therefore, as x is returned, the value it returns would be 8. . Question 28 . !/myFirstRepopart2(/images/Question-28-2014.png) . This question was a silly mistake. As at points A and B are under a while loop which only iterates when n &gt; 2, once n no longer is greater than 2 the while loop is broken and the next lines of code (Point C) are proccessed. . Question 30 (Need to review!) . !/myFirstRepopart2(/images/Question-30-2014.png) . This question needed conceptual understanding for me. However, it makes sense when going over the answer. As the parameter howFar+1 is essentially saying at what paramenter the word should be printed, and as howFar is initialized as 3, that means after m the world compiler will be printed, therefore resulting in &quot;iler&quot; and as the howFar is added to the front, the second part of the word would be &quot;com&quot; as it will go 3 iterations, therefore the printed string will be &quot;ilercom&quot; . Question 31 (Need to review!) . !/myFirstRepopart2(/images/Question-31-2014.png) . This question also required conceptual understanding. As the line of code &quot;data[k+1] = data[k] + data[k+1]&quot;, it doesnt neccessarily replace previosu values, but adds on from previous numbers and then returns them, thus meaning that the printed values would be 5 7 8 11 19, making C the right answer. . Question 33 . !/myFirstRepopart2(/images/Question-33-2014.png) . This was a silly mistake, as I do not know how I missed this. But as the conditional says that the code will contiune as long as sum &lt; 12 || k &lt; 4 (or conditional), and as k will always be 1 and never change in value, the loop will continue infinitely, making E the right answer. Very silly mistake. . Question 34 . !/myFirstRepopart2(/images/Question-34-2014.png) . This question was a silly mistake, as x and y are objects in the class Point, they cannot be accessed directly through x and y. Therefore, the third option is wrong, and the only valid answer would be B. . Question 36 . !/myFirstRepopart2(/images/Question-34-2014.png) . This question was a silly mistake. As 8,11,and 13 would check the first and second parameters, but as 11 and 13 are greater than 9 it wont return -1 for those numbers. But with using 8,9,and 11, one can then get a return of -1 from 9, because 9 is not greater than 9. Thus, the answer is C. . Question 39 (Needs revision!) . !/myFirstRepopart2(/images/Question-39-2014.png) . This question is tricky, and is conceptual based. Essentially, to summarize the . Question 40 (Needs revision!) . !/myFirstRepopart2(/images/Question-40-2014.png) . This was a understandable mistake . As the condtional states that length must be greater than 1, that means the function is trying to add letters and not remove them. The length is equal to the total length of the string, and starting from String[0] prints out the word in imcrements letter by letter until (len-1) is reached . Reflection . Overall, I frankly did horribly on this MC, getting a 15/40 (not even 50%). I think there are many reasons for this, which I will list down below: . - Sleep and exhaust: I was running on 5 hours of sleep and took the test at 5 am in the morning of Saturday on an empty stomach and headache, not a really smart decision when concering your grade - Cockiness: A lot of the questions that I got wrong were silly mistakes, which could have been a avoided if i rechecked answeres and wasnt cocky about myself - Some of the topics I had legimately not brushed up on a while, such as 2D arrays and calling methods in classes (would definetly try to spend more time on those topics), strengthening myself in those topics would be helpful - Getting used to the collegeboard questions. I felt like the questions given by groups in class were definetly a lot easier than the collegeboard questions, and as it was my first time takin an AP CS MCQ, I was familiar with the question style. . Overall, this was clearly not my brightest score. However, I did learn a lot of lessons from this test (dont be cocky, check answers, review before taking test, get some rest before). As I wanted to make sure that the reason I got this score was my personal own fault, and not a lack of knowing the material, I took an AP CSA MCQ practice test online, and got a score of 28/40, which is above the requirement and is a lot better than 15/40 (The test and the answer key will be linked here) . (test) https://www.apcsaexam.org/uploads/1/0/7/7/107712547/2016_practice_ap_exam.pdf) (answer key) https://www.apcsaexam.org/uploads/1/0/7/7/107712547/2016_practice_ap_exam._answers.pdf . Extra Credit Attempt . Backend . import java.lang.Thread; public class Increment { public static void main(String[] args) { int count = 0; try { while (count &lt; 100) { System.out.println(&quot;hello world&quot;); Thread.sleep(3000); count++; } } catch (Exception e) { } } } Increment.main(null); . hello world hello world hello world . Frontend (Javascript API Fetch) . -Link to Frontend .",
            "url": "https://kinerboi.github.io/myFirstRepopart2/2022/11/06/TestCorrections1.html",
            "relUrl": "/2022/11/06/TestCorrections1.html",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Title",
            "content": "%%loadFromPOM &lt;dependency&gt; &lt;groupId&gt;jfree&lt;/groupId&gt; &lt;artifactId&gt;jfreechart&lt;/artifactId&gt; &lt;version&gt;1.0.13&lt;/version&gt; &lt;/dependency&gt; . import java.util.Collections; import java.util.LinkedList; import java.util.List; import java.util.Map; import java.util.TreeMap; List&lt;String&gt; TheList = new ArrayList&lt;String&gt;(); public class StemAndLeaf { public static String createPlot() { List&lt;Double&gt; sorted = new ArrayList&lt;Double&gt;(); sorted.add(1.0); sorted.add(2.0); sorted.add(15.0); sorted.add(35.0); sorted.add(115.0); sorted.add(135.5); TreeMap&lt;Integer, List&lt;Double&gt;&gt; stemPlot = new TreeMap&lt;&gt;(); for(int i = 0; i &lt; sorted.size(); i++) { int stem = (int)(sorted.get(i) / 10.0); double leaf = sorted.get(i) % 10; if (!stemPlot.containsKey(stem)) { stemPlot.put(stem, new ArrayList&lt;&gt;()); } stemPlot.get(stem).add(leaf); } String plot = new String(); for(Integer i : stemPlot.keySet()) { if (i &lt; 10) plot+= &quot;| &quot; + i + &quot; | &quot;; else plot += &quot;| &quot; + i + &quot; | &quot;; for (Double j : stemPlot.get(i)) { plot+=&quot;&quot;+j+&quot; &quot;; } plot+=&quot; n&quot;; } return plot; } } System.out.println(StemAndLeaf.createPlot()); . | 0 | 1.0 2.0 | 1 | 5.0 | 3 | 5.0 | 11 | 5.0 | 13 | 5.5 .",
            "url": "https://kinerboi.github.io/myFirstRepopart2/2022/11/01/Stemplot.html",
            "relUrl": "/2022/11/01/Stemplot.html",
            "date": " • Nov 1, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Unit 3 Homework - Kinish S/Rohan J",
            "content": "Question 2 . import java.util.*; public class Quadratic { public static void main (String[] args) { Scanner sc = new Scanner(System.in); double a = sc.nextDouble(); System.out.println(a); double b = sc.nextDouble(); System.out.println(b); double c = sc.nextDouble(); System.out.println(c); double quadratic1 = (-1*b + Math.sqrt(b*b-4*a*c))/2*a; double quadratic2 = (-1*b - Math.sqrt(b*b-4*a*c))/2*a; System.out.println(quadratic1 + &quot; or &quot; + quadratic2); } } Quadratic.main(null); . 1.0 5.0 1.0 -0.20871215252208009 or -4.7912878474779195 . Question 4 . import java.util.*; public class Sign { public static void main (String[] args) { Scanner sc = new Scanner(System.in); System.out.print(&quot;Input number - &quot;); double input = sc.nextDouble(); System.out.println(input); if (input &lt; 0) { System.out.println(&quot;Negative&quot;); } else if (input &gt; 0) { System.out.println(&quot;Positive&quot;); } else { System.out.println(0); } } } Sign.main(null); . Input number - 25.0 Positive . Question 6 . import java.util.*; public class Round { public static void main (String[] args) { Scanner sc = new Scanner(System.in); System.out.print(&quot;Input number - &quot;); double input1 = sc.nextDouble(); System.out.println(input1); System.out.print(&quot;Input number - &quot;); double input2 = sc.nextDouble(); System.out.println(input2); input1 = Math.round(input1 * Math.pow(10, 3)) / Math.pow(10, 3); input2 = Math.round(input2 * Math.pow(10, 3)) / Math.pow(10, 3); if (input1 == input2) { System.out.println(&quot;They are the same&quot;); } else { System.out.println(&quot;They are different&quot;); } } } Round.main(null); . Input number - 25.586 Input number - 25.589 They are different . Question 8 . import java.util.*; public class Letter { public static void main (String[] args) { Scanner sc = new Scanner(System.in); System.out.print(&quot;Input character - &quot;); String input1 = sc.next(); System.out.println(input1); if (input1.equals(&quot;a&quot;) || input1.equals(&quot;e&quot;) || input1.equals(&quot;i&quot;) || input1.equals(&quot;o&quot;) || input1.equals(&quot;u&quot;) || input1.equals(&quot;y&quot;)) { System.out.println(&quot;Character is a vowel&quot;); } else { System.out.println(&quot;Character is a consonant&quot;); } } } Letter.main(null); . Input character - a Character is a vowel . Question 10 . public class Natural { public static void main (String[] args) { System.out.print(&quot;The first 10 natural numbers :&quot;); System.out.println(&quot; &quot;); for(int num = 1; num &lt; 11; num++) { System.out.println(&quot;Enter&quot;) System.out.println(num); int input = sc.nextInt(); } } } Natural.main(null); . The first 10 natural numbers : 1 2 3 4 5 6 7 8 9 10 . Question 12 . import java.util.*; public class Mean { public static void main (String[] args) { int n=0; int s=0; int average = 0; System.out.println(&quot;Input number :&quot;); for (int i = 0; i &lt; 5; i++) { Scanner sc = new Scanner(System.in); n = sc.nextInt(); System.out.println(n); s += n; } average = s/5; System.out.println(&quot;Sum is &quot; + s); System.out.println(&quot;Average is &quot; + average); } } Mean.main(null); . Input number : 1 2 3 4 5 Sum is 15 Average is 3 . Question 14 . import java.util.*; public class Multiplication { public static void main (String[] args) { Scanner sc = new Scanner(System.in); System.out.println(&quot;Input number :&quot;); int input = sc.nextInt(); int product = 0; for (int i = 0; i &lt; 6; i++) { product = input * i; System.out.println(input + &quot;*&quot; + i + &quot;=&quot; + product); } } } Multiplication.main(null); . Input number : 5*0=0 5*1=5 5*2=10 5*3=15 5*4=20 5*5=25 . Question 16 . import java.util.*; public class Pyramid { public static void main (String[] args) { Scanner sc = new Scanner(System.in); System.out.println(&quot;Enter input for number of rows&quot;); int input = sc.nextInt(); for (int i = 0; i &lt; input; i++) { for (int j = 1; j &lt;= i; j++) { System.out.print(j); } System.out.println(&quot; &quot;); } } } Pyramid.main(null); . Enter input for number of rows 1 12 123 1234 12345 123456 1234567 12345678 123456789 . Question 18 . import java.util.*; public class Triangle { public static void main (String[] args) { Scanner sc = new Scanner(System.in); System.out.println(&quot;Enter input for number of rows&quot;); int input = sc.nextInt(); int k = 1; for (int i = 1; i &lt; input; i++) { for (int j = 1; j &lt;= i; j++) { System.out.print(k++); } System.out.println(&quot; &quot;); } } } Triangle.main(null); . Enter input for number of rows 1 23 456 78910 . Question 20 . import java.util.*; public class Triangle2 { public static void main (String[] args) { Scanner sc = new Scanner(System.in); System.out.println(&quot;Enter input for number of rows&quot;); int input = sc.nextInt(); int k = 1; for (int i = 1; i &lt; input; i++) { for (int j = 1; j &lt;= i; j++) { System.out.print(k++); System.out.print(&quot; &quot;); } System.out.println(&quot; &quot;); } } } Triangle2.main(null); . Enter input for number of rows 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 . 2019 FRQ 1 A . public static int numberOfLeapYears(int year1, int year2) { int count = 0; for (int i = year1; i &lt;= year2; i++) { // add to count if year is leap year if (isLeapYear(i)) count++; } return count; } . 2019 FRQ 1 B . public static int dayOfWeek(int month, int day, int year) { int day = firstDayOfYear(year) + dayOfYear(month, day, year) - 1; // only 7 days in a week return day % 7; } .",
            "url": "https://kinerboi.github.io/myFirstRepopart2/2022/10/24/Unit3.html",
            "relUrl": "/2022/10/24/Unit3.html",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Ceasar Cipher Unit 4 HW",
            "content": "public class caesarCipher { public static String crack (String message) { String crack = &quot;&quot;; for (int i = 0; i&lt;message.length(); i++) { if (message.charAt(i) &lt; &#39;a&#39; || message.charAt(i) &gt; &#39;z&#39;) { crack += message.charAt(i); continue; } int letter = message.charAt(i)-&#39;a&#39;; int new_letter = (letter-4)%26; crack += (char)(new_letter+&#39;a&#39;); } return crack; } public static void main(String[] args) { String message1 = &quot;xli yrmxih wxexiw sj eqivmge&quot;; System.out.println(crack(message1)); String message2 = &quot;xli xlmvxiir gspsrmiw&quot;; System.out.println(crack(message2)); String message3 = &quot;i tpyvmfyw yryq, rszyw svhs wigpsvyq&quot;; System.out.println(crack(message3)); } } caesarCipher.main(null); . the united states of america the thirteen colonies e pluribus unum, novus ordo seclorum .",
            "url": "https://kinerboi.github.io/myFirstRepopart2/2022/10/23/Unit4HW.html",
            "relUrl": "/2022/10/23/Unit4HW.html",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "2018 FRQ 1",
            "content": "1a . Point of code is to simulate the frog hopping, and as it hops return a boolean if the frog has crossed the simulated distance needed or not . public boolean simulate () { int goalDistance1 = 0; for( int i = 0; int i &lt; FrogSimuation.maxhops(); i++ ) { int goalDistance1 = maxHops * hopDistance; if (goalDistance == goalDistance1) { return 1; } else { return -1; } int count = i; } } . 1b . Point of code is to see in which how many simulations the frog can cross the desired distane . public double runSimulations (int num) { double proportion = count/num; System.out.println(proportion); } .",
            "url": "https://kinerboi.github.io/myFirstRepopart2/2022/10/23/Unit2HW.html",
            "relUrl": "/2022/10/23/Unit2HW.html",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Title",
            "content": "public void addMembers(String[] names, int gradYear) { for (int i = 1; i&lt;= names.length; i++) { memberList.add(new Member(names[i-1], gradYear, true)); } } .",
            "url": "https://kinerboi.github.io/myFirstRepopart2/2022/10/20/Unit6HW.html",
            "relUrl": "/2022/10/20/Unit6HW.html",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Unit 1 Lesson",
            "content": "Why to use Java? (1.1) . Java is an important programming language that is widely used throughout the tech industry and contains many important programmming concepts such as object oriented programming. . Basic Java (1.1) . All code that runs must be in the main method (shown below) | To print something, use System.out.print(); and inside the parenthesis put text in quotes (String) To print with a new line, use System.out.println(); | . | To comment your code, use // for single line comments and /**/ for multiple lines (example will be shown below) It is important to describe how and why your code works, however dont describe obvious things | . | . public class Example { public static void main(String[] args) { System.out.print(&quot;Hello World&quot;); System.out.print(&quot; From Team Oops!&quot;); System.out.println(); //done to separate two different lines System.out.println(&quot;Welcome to our presentation!&quot;); System.out.print(&quot;We hope you learn something from it!&quot;); } } Example.main(null); . Hello World From Team Oops! Welcome to our presentation! We hope you learn something from it! . Hack 1.1 . Print your name and your team name in separate lines! . public class Printing { } Printing.main(null); . List of Data Types (1.2) . Data types are different categories in which one can store various types of data. | The main Primitve data types are: Integer (int): used for whole numbers | Double (double): used for numbers with decimals | Boolean (boolean): used for true or false conditionals | . | For Primitive types, variables store actual data instead of reference | If the variable is declared final, it cannot be edited | A non Primitive type which is commonly used is String Stores text | . | . public class Example { public static void main(String[] args) { int Herbo = 10; double gasPrices = 7.99; final boolean Hot = true; String name = &quot;Team Oops is hot:&quot;; System.out.println(Herbo); System.out.println(gasPrices); System.out.println(name + Hot); // Hot = false; cannot assign a value to final variable Hot } } Example.main(null); . 10 7.99 Team Oops is hot:true . Hack 1.2 . Create variables for your biodata (name, age, underclassmen or not, height in feet) . public class Biodata { public static void main(String[] args) { } } Biodata.main(null); . Operators (1.3) . In order to perform mathmatical calculations on integers and doubles, you can use operators | Main ones are +, -, *, / These are what you expect | When dividing integers, it always rounds down because output must be an integer | When dividing by 0, will get the ArithemticException Error | . | Modulus is %, used to get remainder when two numbers are divided | . public class Math { public static void main(String[] args) { int number = 2; int number2 = 5; double number3 = 2.0; double number4 = 5.0; System.out.println(number+number2); System.out.println(number3+number4); System.out.println(number-number2); System.out.println(number3-number4); System.out.println(number * number2); System.out.println(number3 * number4); System.out.println(number/number2); System.out.println(number3/number4); System.out.println(number4 % number3); System.out.println(number2 % number); } } Math.main(null); . 7 7.0 -3 -3.0 10 10.0 0 0.4 1.0 1 . Hack 1.3 . Compute the remainder of 6 multiplied by 1234124 divided by 11345 minus 890809 plus 90800 (use order of operations) is divided by 980098, and store this in a variable called num (get an exact number as opposed to a whole number) | Divide num by 100 | Print num | . public class Num { public static void main(String[] args) { } } Num.main(null); . Assignment operators (1.4) . += adds value of a variabe to another variable and assigns total value to first variable | -= subtracts value of a variabe to another variable and assigns total value to first variable | *= multiplies value of a variabe to another variable and assigns total value to first variable | /= multiplies value of a variabe to another variable and assigns total value to first variable | %= takes the remainder of a variable with a second variable and assigns remainder to first variable | ++ increments a variable by 1, to incrememt by more change second plus to number which you want to incrememnt by | -- subracts a variable by 1, to incrememt by more change second plus to number which you want to subtract by | . Hack 1.4 . Create a code which performs mathmatical calculations with assignment operators! | . public class Operators { public static void main(String[] args) { } } Operators.main(null); . Casting and Ranges (1.5) . Doubles and Integers can be converted to each other using (int) or (double) When converting from doubles to integers, will round down | . | Integers are 4 bytes of data, can store between Integer.MAX_VALUE and Integer.MIN_VALUE | . public class Cast { public static void main(String[] args) { double num = 10.5; int num2 = 100; int numInt = (int)num; double num2Double = (double)num2; System.out.println(num); System.out.println(num2); System.out.println(numInt); System.out.println(num2Double); System.out.println(Integer.MAX_VALUE); System.out.println(Integer.MIN_VALUE); } } Cast.main(null); . 10.5 100 10 100.0 2147483647 -2147483648 . Hack 1.5 . Convert 123456.123456 into an integer | Set 678901234567890 into an integer (what do you think will happen?) | . public class CastActivity { public static void main(String[] args) { } } CastActivity.main(null); . Code Example! . public class Main { public static void main (String[] args) { Scanner sc = new Scanner(System.in); System.out.println(&quot;What is your name?&quot;); String name = sc.next(); //string System.out.println(name); System.out.println(&quot;How many pizzas do you want to buy?&quot;); int pizzas = sc.nextInt(); //integer System.out.println(pizzas); System.out.println(&quot;Do you have the discount (true/false)?&quot;); boolean hasDiscount = sc.nextBoolean(); //boolean System.out.println(hasDiscount); double price; //double, defaults to 0 if (hasDiscount) { price = 1.20; } else { price = 2.10; } char firstChar = name.charAt(0); //character double finalPrice = price * pizzas * 1.08; // adding taxes System.out.println(&quot;Hi &quot; + firstChar + &quot;! You have to pay &quot; + (finalPrice) + &quot; dollars.&quot;); } } Main.main(null); . What is your name? Kinish How many pizzas do you want to buy? 6 Do you have the discount (true/false)? true Hi K! You have to pay 7.776 dollars. .",
            "url": "https://kinerboi.github.io/myFirstRepopart2/cb/2022/10/20/Lesson.html",
            "relUrl": "/cb/2022/10/20/Lesson.html",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Title",
            "content": "frontmatter . public class StepTracker { private double Steps = 0; private int activeDays = 0; private int totalDays = 0; private double cutoff = 0; public StepTracker (double Steps) { this.cutoff = Steps; } public void addDailySteps (int Steps) { this.Steps = this.Steps + Steps; if (Steps &gt;= cutoff) { this.activeDays++; } this.totalDays++; } public int activeDays () { return activeDays; } public double averageSteps() { return this.Steps/totalDays; } public static void main (String[] args) { StepTracker tr = new StepTracker(10000); System.out.println(tr.activeDays()); System.out.println(tr.averageSteps()); tr.addDailySteps(9000); tr.addDailySteps(5000); System.out.println(tr.activeDays()); System.out.println(tr.averageSteps()); tr.addDailySteps(13000); System.out.println(tr.activeDays()); System.out.println(tr.averageSteps()); tr.addDailySteps(23000); tr.addDailySteps(1111); System.out.println(tr.activeDays()); System.out.println(tr.averageSteps()); } } StepTracker.main(null); . 0 NaN 0 7000.0 1 9000.0 2 10222.2 .",
            "url": "https://kinerboi.github.io/myFirstRepopart2/2022/10/20/Class.html",
            "relUrl": "/2022/10/20/Class.html",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Array List for stats calculations",
            "content": "import java.util.*; class printsTring { public static void main(String args[]) { ArrayList&lt;Double&gt; numbers = new ArrayList&lt;&gt;(); numbers.add (1.0); numbers.add (2.0); numbers.add (3.0); numbers.add (4.0); numbers.add (5.0); numbers.add (6.0); System.out.println(&quot;First Array List &quot; + numbers); numbers.add(1, 7.0); System.out.println(&quot;Second Array List &quot; + numbers); numbers.remove(new Double(5)); System.out.println(&quot;Third Array List &quot; + numbers); double size = numbers.size(); System.out.println(size); System.out.println(&quot;Index of 6: &quot; + numbers.indexOf(6)); System.out.println(&quot;Has 5: &quot; + numbers.contains(5)); System.out.println(&quot;Has 4: &quot; + numbers.contains(4)); Comparator&lt;Double&gt; comparator = new Comparator&lt;Double&gt;() { @Override public int compare(Double numbers, Double numbers1) { if (numbers &gt; numbers1 ) { return 1; } else if (numbers &lt; numbers1) { return -1; } else { return 0; } } }; numbers.sort(comparator); System.out.println(&quot;Sorted list &quot; + numbers); double total = 0; for (Double i: numbers) { total = total + i; } double mean = total/numbers.size(); System.out.println(&quot;The mean of the list is &quot; + mean); double middle = 0; if(numbers.size() %2 == 0) { middle = (numbers.get(numbers.size()/2 - 1) + numbers.get(numbers.size()/2-3)/2); System.out.println(&quot;The median of the list is &quot; + middle); } else { middle = numbers.get(numbers.size() / 2); System.out.println(&quot;The median of the list is &quot; + middle); } double total2 = 0; for (Double k: numbers) { total2 = Math.pow((mean - k), 2); } double standardDeviation = Math. sqrt((total2)/(numbers.size()-1)); System.out.println(&quot;The Standard Deviation for this set is &quot; + standardDeviation); } } printsTring.main(null) . First Array List [1.0, 2.0, 3.0, 4.0, 5.0, 6.0] Second Array List [1.0, 7.0, 2.0, 3.0, 4.0, 5.0, 6.0] Third Array List [1.0, 7.0, 2.0, 3.0, 4.0, 6.0] 6.0 Index of 6: -1 Has 5: false Has 4: false Sorted list [1.0, 2.0, 3.0, 4.0, 6.0, 7.0] The mean of the list is 3.8333333333333335 The median of the list is 3.5 The Standard Deviation for this set is 1.4161763857498668 . How we met collegeboard metrics for ArrayList . intro = we initialized array and defined it, gave it a type and name . methods = used different methods such as add, remove, size to do certain code . traversing = enhanced for loop used in order to help calculate mean . searching = used to find the index of which the median of the set occured at, so that median could be calculated . sorting = used comparator to sort numbers into order and was useful for calculations of mean and median . ethics = data our own, not manipulated and all calculations are correct without any fault in mathematical equations .",
            "url": "https://kinerboi.github.io/myFirstRepopart2/2022/10/06/ListArray.html",
            "relUrl": "/2022/10/06/ListArray.html",
            "date": " • Oct 6, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Week 7 Rohan/Kinish",
            "content": "Curreny Conversion . Code uses currency API to convert rates . package com.nighthawk.spring_portfolio.controllers; import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.util.HashMap; import java.util.Map; import org.json.*; public class CurrencyConversion { public Map&lt;String, Double&gt; convertFrom (String currency, Double amount) { Map&lt;String, Double&gt; rates = getRatesByEuro(); Map&lt;String, Double&gt; ret = new HashMap&lt;String, Double&gt;(); for (String key : rates.keySet()) { ret.put(key, rates.get(key) / rates.get(currency) * amount); } return ret; } public static Map&lt;String, Double&gt; getRatesByEuro () { Map&lt;String, Double&gt; ret = new HashMap&lt;String, Double&gt;(); HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://currency-conversion-and-exchange-rates.p.rapidapi.com/latest&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;92a566eec7msh22a859e4fed0e95p1f3079jsn8ea0b6a705c0&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;currency-conversion-and-exchange-rates.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response; try { response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); } catch (Exception e) { System.out.println(&quot;error&quot;); return ret; } System.out.println(response.body()); JSONObject jsonString = new JSONObject(response.body()); JSONObject rates = jsonString.getJSONObject(&quot;rates&quot;); for (String key: rates.keySet()) { double rate = rates.getDouble(key); ret.put(key, rate); } return ret; } } . This is our spring code to use this class . package com.nighthawk.spring_portfolio.controllers; import java.util.Map; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestParam; @Controller // HTTP requests are handled as a controller, using the @Controller annotation public class CurrencyConverter { @GetMapping(&quot;/currencyconvert&quot;) public String currencyconvert(@RequestParam(name=&quot;currency&quot;, required=false) String currency, @RequestParam(name=&quot;amount&quot;, required=false) Double amount, Model model) { if (currency != null &amp;&amp; amount != null) { CurrencyConversion converter = new CurrencyConversion(); Map&lt;String, Double&gt; currencyResults = converter.convertFrom(currency, amount); model.addAttribute(&quot;results&quot;, currencyResults); } return &quot;currencyconvert&quot;; } } . Image ASCII/Grayscale . package com.nighthawk.spring_portfolio.controllers; import java.awt.image.BufferedImage; import java.awt.Color; //actually converts images (TODO: impelement the functions) public class ImageConversion { public BufferedImage same (BufferedImage img) { return img; } public BufferedImage grayscale (BufferedImage img) { for (int y = 0; y &lt; img.getHeight(); y++) { for (int x = 0; x &lt; img.getWidth(); x++) { int pixel = img.getRGB(x,y); Color color = new Color(pixel, true); int red = color.getRed(); int blue = color.getBlue(); int green = color.getGreen(); int grayscale = ((red + blue + green)/3); int rgb=new Color(grayscale,grayscale,grayscale).getRGB(); img.setRGB(x,y,rgb); } } return img; } public BufferedImage redscale (BufferedImage img) { for (int y = 0; y &lt; img.getHeight(); y++) { for (int x = 0; x &lt; img.getWidth(); x++) { int pixel = img.getRGB(x,y); Color color = new Color(pixel, true); int red = color.getRed(); int blue = color.getBlue(); int green = color.getGreen(); int redscale = ((red + blue + green)/3); int rgb=new Color(redscale,0,0).getRGB(); img.setRGB(x,y,rgb); } } return img; } public BufferedImage bluescale (BufferedImage img) { for (int y = 0; y &lt; img.getHeight(); y++) { for (int x = 0; x &lt; img.getWidth(); x++) { int pixel = img.getRGB(x,y); Color color = new Color(pixel, true); int red = color.getRed(); int blue = color.getBlue(); int green = color.getGreen(); int bluescale = ((red + blue + green)/3); int rgb=new Color(0,0,bluescale).getRGB(); img.setRGB(x,y,rgb); } } return img; } public BufferedImage greenscale (BufferedImage img) { for (int y = 0; y &lt; img.getHeight(); y++) { for (int x = 0; x &lt; img.getWidth(); x++) { int pixel = img.getRGB(x,y); Color color = new Color(pixel, true); int red = color.getRed(); int blue = color.getBlue(); int green = color.getGreen(); int greenscale = ((red + blue + green)/3); int rgb=new Color(0,greenscale,0).getRGB(); img.setRGB(x,y,rgb); } } return img; } public String ascii (BufferedImage img) { String asciiString = &quot;&quot;; for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); asciiString += asciiChar(pixVal); } asciiString += &quot; n&quot;; } return asciiString; } private String asciiChar(double g) { String str = &quot;&quot;; if (g &gt;= 240) { str = &quot;$$&quot;; } else if (g &gt;= 210) { str = &quot;..&quot;; } else if (g &gt;= 190) { str = &quot;**&quot;; } else if (g &gt;= 170) { str = &quot;++&quot;; } else if (g &gt;= 120) { str = &quot;^^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;88&quot;; } else if (g &gt;= 60) { str = &quot;##&quot;; } else { str = &quot;@@&quot;; } return str; } } . This code uses this class with springboot. . package com.nighthawk.spring_portfolio.controllers; import java.awt.image.BufferedImage; import java.io.File; import java.io.IOException; import java.util.UUID; import javax.imageio.ImageIO; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.multipart.MultipartFile; @Controller public class ImageConverter { @GetMapping(&quot;/imageconvert&quot;) public String convertGet(Model model) { return &quot;imageconvert&quot;; } @PostMapping(&quot;/imageconvert&quot;) public String convertPost(@RequestParam(name=&quot;type&quot;, required=true) String type, @RequestParam(&quot;image&quot;) MultipartFile multipartFile, Model model) { BufferedImage imBuff; try { imBuff = ImageIO.read(multipartFile.getInputStream()); } catch (IOException e) { System.err.println(&quot;error occured wow sad cry about it&quot;); return &quot;imageconvert&quot;; } BufferedImage output = imBuff; ImageConversion converter = new ImageConversion(); if (type.equals(&quot;ascii&quot;)) { model.addAttribute(&quot;ascii&quot;, converter.ascii(imBuff)); return &quot;imageconvert&quot;; } else if (type.equals(&quot;gray&quot;)) { output = converter.grayscale(imBuff); } else if (type.equals(&quot;red&quot;)) { output = converter.redscale(imBuff); } else if (type.equals(&quot;green&quot;)) { output = converter.greenscale(imBuff); } else if (type.equals(&quot;blue&quot;)) { output = converter.bluescale(imBuff); } String uniqueID = UUID.randomUUID().toString(); File outputfile = new File(&quot;target/classes/static/images/&quot; + uniqueID + &quot;.png&quot;); try { outputfile.createNewFile(); if (output != null) ImageIO.write(output, &quot;png&quot;, outputfile); } catch (IOException e) { return &quot;imageconvert&quot;; } model.addAttribute(&quot;image&quot;, &quot;images/&quot;+uniqueID+&quot;.png&quot;); return &quot;imageconvert&quot;; } } .",
            "url": "https://kinerboi.github.io/myFirstRepopart2/markdown/2022/10/04/Week-7.html",
            "relUrl": "/markdown/2022/10/04/Week-7.html",
            "date": " • Oct 4, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Currency API!",
            "content": "%%loadFromPOM &lt;dependency&gt; &lt;groupId&gt;org.json&lt;/groupId&gt; &lt;artifactId&gt;json&lt;/artifactId&gt; &lt;version&gt;20190722&lt;/version&gt; &lt;/dependency&gt; . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.util.Scanner; import org.json.*; public class Currency { public static void main(String args[]) throws IOException,InterruptedException { Scanner input = new Scanner(System.in); System.out.println(&quot;Please enter the currency you want to compare rates! - &quot;); String currency1 = input.next(); HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://currency-conversion-and-exchange-rates.p.rapidapi.com/latest?from=&quot;+ currency1)) .header(&quot;X-RapidAPI-Key&quot;, &quot;92a566eec7msh22a859e4fed0e95p1f3079jsn8ea0b6a705c0&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;currency-conversion-and-exchange-rates.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); JSONObject jsonString = new JSONObject(response.body()); JSONObject rates = jsonString.getJSONObject(&quot;rates&quot;); for (String key: rates.keySet()) { double rate = rates.getDouble(key); System.out.println(key + &quot; &quot; +rate); } } } . Currency.main(null); . Please enter the currency you want to compare rates! - {&#34;timestamp&#34;:1664774943,&#34;base&#34;:&#34;EUR&#34;,&#34;success&#34;:true,&#34;date&#34;:&#34;2022-10-03&#34;,&#34;rates&#34;:{&#34;ANG&#34;:1.757722,&#34;SVC&#34;:8.534425,&#34;CAD&#34;:1.3484,&#34;XCD&#34;:2.646717,&#34;MVR&#34;:15.130166,&#34;HRK&#34;:7.515171,&#34;AUD&#34;:1.522596,&#34;MWK&#34;:1001.087283,&#34;XAG&#34;:0.050846,&#34;MAD&#34;:10.724791,&#34;PHP&#34;:57.764944,&#34;NAD&#34;:17.70642,&#34;GNF&#34;:8430.945108,&#34;KES&#34;:117.765821,&#34;MZN&#34;:62.511427,&#34;BTN&#34;:79.436836,&#34;MGA&#34;:4140.173197,&#34;AZN&#34;:1.66474,&#34;XAU&#34;:0.000589,&#34;RON&#34;:4.948019,&#34;CHF&#34;:0.965983,&#34;EGP&#34;:19.15385,&#34;BSD&#34;:0.975324,&#34;TWD&#34;:31.239503,&#34;GGP&#34;:0.846734,&#34;LVL&#34;:0.592393,&#34;MMK&#34;:2048.139501,&#34;WST&#34;:2.66927,&#34;ILS&#34;:3.497794,&#34;BHD&#34;:0.369465,&#34;GBP&#34;:0.880325,&#34;TZS&#34;:2283.822543,&#34;SDG&#34;:566.559125,&#34;LAK&#34;:16100.510315,&#34;DJF&#34;:173.624131,&#34;BYN&#34;:2.46179,&#34;MRO&#34;:349.624499,&#34;RWF&#34;:1032.612981,&#34;PEN&#34;:3.877898,&#34;EUR&#34;:1,&#34;ZMK&#34;:8815.242039,&#34;RSD&#34;:117.222764,&#34;INR&#34;:80.037701,&#34;MUR&#34;:44.608686,&#34;BWP&#34;:12.995433,&#34;GEL&#34;:2.766618,&#34;KMF&#34;:491.090133,&#34;UZS&#34;:10742.235633,&#34;RUB&#34;:56.826211,&#34;CUC&#34;:0.979341,&#34;BGN&#34;:1.954363,&#34;JOD&#34;:0.694364,&#34;NGN&#34;:423.437944,&#34;BDT&#34;:98.800321,&#34;PKR&#34;:222.735142,&#34;BRL&#34;:5.303919,&#34;KZT&#34;:464.397833,&#34;CVE&#34;:110.168347,&#34;HNL&#34;:24.083379,&#34;NZD&#34;:1.739304,&#34;ERN&#34;:14.690112,&#34;NPR&#34;:127.092904,&#34;ZMW&#34;:15.385545,&#34;FKP&#34;:0.846734,&#34;DZD&#34;:137.897204,&#34;JMD&#34;:148.309856,&#34;CRC&#34;:611.910663,&#34;GMD&#34;:54.257369,&#34;PLN&#34;:4.857335,&#34;AMD&#34;:393.640632,&#34;BMD&#34;:0.979341,&#34;BZD&#34;:1.965955,&#34;BBD&#34;:1.969232,&#34;SBD&#34;:7.98172,&#34;IDR&#34;:14975.002326,&#34;ALL&#34;:116.625301,&#34;IQD&#34;:1423.486613,&#34;BIF&#34;:2014.470957,&#34;HKD&#34;:7.687791,&#34;GIP&#34;:0.846734,&#34;BAM&#34;:1.954116,&#34;LKR&#34;:356.477516,&#34;QAR&#34;:3.565757,&#34;SAR&#34;:3.679677,&#34;TOP&#34;:2.390277,&#34;SEK&#34;:10.850704,&#34;ZAR&#34;:17.718283,&#34;ARS&#34;:144.04095,&#34;MYR&#34;:4.554922,&#34;BYR&#34;:19195.079792,&#34;KPW&#34;:881.406769,&#34;CZK&#34;:24.585342,&#34;STD&#34;:20270.377397,&#34;BTC&#34;:5.1260066e-05,&#34;ZWL&#34;:315.34734,&#34;LSL&#34;:17.706578,&#34;COP&#34;:4514.770908,&#34;PAB&#34;:0.975344,&#34;IRR&#34;:41475.083648,&#34;LTL&#34;:2.891739,&#34;OMR&#34;:0.377002,&#34;CNY&#34;:6.969007,&#34;XPF&#34;:65.542386,&#34;AOA&#34;:424.451687,&#34;SCR&#34;:12.787246,&#34;MOP&#34;:7.885901,&#34;XOF&#34;:655.368649,&#34;XDR&#34;:0.764414,&#34;NIO&#34;:35.081148,&#34;ISK&#34;:141.308934,&#34;VND&#34;:23413.590312,&#34;UYU&#34;:40.330852,&#34;USD&#34;:0.979341,&#34;UGX&#34;:3756.196389,&#34;DOP&#34;:52.076249,&#34;UAH&#34;:36.020063,&#34;BOB&#34;:6.739487,&#34;TTD&#34;:6.626019,&#34;NOK&#34;:10.649587,&#34;TND&#34;:3.201501,&#34;SGD&#34;:1.406706,&#34;TMT&#34;:3.437486,&#34;GHS&#34;:10.192678,&#34;TJS&#34;:9.582935,&#34;KHR&#34;:4017.334495,&#34;ETB&#34;:51.536534,&#34;PGK&#34;:3.436615,&#34;THB&#34;:37.303369,&#34;AED&#34;:3.597215,&#34;CLP&#34;:948.011308,&#34;LRD&#34;:150.577558,&#34;SYP&#34;:2460.623466,&#34;KYD&#34;:0.812779,&#34;SRD&#34;:27.998863,&#34;CUP&#34;:25.952531,&#34;LYD&#34;:4.927876,&#34;SLL&#34;:15174.886043,&#34;SHP&#34;:1.348942,&#34;FJD&#34;:2.262326,&#34;IMP&#34;:0.846734,&#34;JEP&#34;:0.846734,&#34;PYG&#34;:6894.910157,&#34;KRW&#34;:1413.707426,&#34;SZL&#34;:17.553042,&#34;GYD&#34;:204.061391,&#34;MDL&#34;:19.018426,&#34;MXN&#34;:19.690117,&#34;HTG&#34;:118.012056,&#34;JPY&#34;:141.913832,&#34;SOS&#34;:556.755138,&#34;MNT&#34;:3157.827681,&#34;AFN&#34;:86.052747,&#34;GTQ&#34;:7.682356,&#34;CLF&#34;:0.034357,&#34;KGS&#34;:78.520704,&#34;TRY&#34;:18.173136,&#34;YER&#34;:245.079605,&#34;HUF&#34;:423.114423,&#34;BND&#34;:1.39995,&#34;MKD&#34;:61.560991,&#34;AWG&#34;:1.762813,&#34;CDF&#34;:2002.752133,&#34;LBP&#34;:1474.676123,&#34;VUV&#34;:116.50422,&#34;XAF&#34;:655.368649,&#34;KWD&#34;:0.303556,&#34;DKK&#34;:7.436419}} FJD 2.262326 STD 20270.377397 MXN 19.690117 LVL 0.592393 SCR 12.787246 CDF 2002.752133 BBD 1.969232 GTQ 7.682356 CLP 948.011308 HNL 24.083379 UGX 3756.196389 ZAR 17.718283 TND 3.201501 CUC 0.979341 BSD 0.975324 SLL 15174.886043 SDG 566.559125 IQD 1423.486613 GMD 54.257369 CUP 25.952531 TWD 31.239503 RSD 117.222764 DOP 52.076249 KMF 491.090133 MYR 4.554922 FKP 0.846734 XOF 655.368649 GEL 2.766618 BTC 5.1260066E-5 UYU 40.330852 MAD 10.724791 CVE 110.168347 TOP 2.390277 AZN 1.66474 OMR 0.377002 PGK 3.436615 KES 117.765821 SEK 10.850704 BTN 79.436836 UAH 36.020063 GNF 8430.945108 MZN 62.511427 ERN 14.690112 SVC 8.534425 ARS 144.04095 QAR 3.565757 IRR 41475.083648 MRO 349.624499 UZS 10742.235633 CNY 6.969007 XPF 65.542386 THB 37.303369 BDT 98.800321 LYD 4.927876 BMD 0.979341 PHP 57.764944 KWD 0.303556 RUB 56.826211 PYG 6894.910157 JMD 148.309856 ISK 141.308934 COP 4514.770908 USD 0.979341 MKD 61.560991 DZD 137.897204 PAB 0.975344 GGP 0.846734 SGD 1.406706 ETB 51.536534 JEP 0.846734 SOS 556.755138 KGS 78.520704 VUV 116.50422 LAK 16100.510315 ZMK 8815.242039 BND 1.39995 XAF 655.368649 XAG 0.050846 LRD 150.577558 HRK 7.515171 CHF 0.965983 DJF 173.624131 ALL 116.625301 ZMW 15.385545 TZS 2283.822543 XAU 5.89E-4 VND 23413.590312 AUD 1.522596 ILS 3.497794 KPW 881.406769 GHS 10.192678 GYD 204.061391 BOB 6.739487 KHR 4017.334495 MDL 19.018426 IDR 14975.002326 KYD 0.812779 AMD 393.640632 BWP 12.995433 SHP 1.348942 TRY 18.173136 LBP 1474.676123 TJS 9.582935 JOD 0.694364 RWF 1032.612981 HKD 7.687791 AED 3.597215 EUR 1.0 LSL 17.706578 DKK 7.436419 CAD 1.3484 BGN 1.954363 MMK 2048.139501 MUR 44.608686 NOK 10.649587 SYP 2460.623466 IMP 0.846734 ZWL 315.34734 GIP 0.846734 RON 4.948019 LKR 356.477516 NGN 423.437944 CRC 611.910663 CZK 24.585342 PKR 222.735142 XCD 2.646717 ANG 1.757722 HTG 118.012056 BHD 0.369465 KZT 464.397833 SRD 27.998863 SZL 17.553042 SAR 3.679677 LTL 2.891739 TTD 6.626019 YER 245.079605 MVR 15.130166 AFN 86.052747 INR 80.037701 NPR 127.092904 KRW 1413.707426 AWG 1.762813 JPY 141.913832 MNT 3157.827681 PLN 4.857335 AOA 424.451687 GBP 0.880325 SBD 7.98172 BYN 2.46179 HUF 423.114423 BYR 19195.079792 BIF 2014.470957 MWK 1001.087283 MGA 4140.173197 XDR 0.764414 BZD 1.965955 BAM 1.954116 EGP 19.15385 MOP 7.885901 NAD 17.70642 NIO 35.081148 PEN 3.877898 WST 2.66927 NZD 1.739304 TMT 3.437486 CLF 0.034357 BRL 5.303919 . .",
            "url": "https://kinerboi.github.io/myFirstRepopart2/2022/10/01/currencyAPI.html",
            "relUrl": "/2022/10/01/currencyAPI.html",
            "date": " • Oct 1, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Image converter!",
            "content": "import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;MonaLisa&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; private int pixel; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;...&quot;; } else if (g &gt;= 190) { str = &quot;***&quot;; } else if (g &gt;= 170) { str = &quot;+++&quot;; } else if (g &gt;= 120) { str = &quot;^^^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&amp;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;888&quot;; } else if (g &gt;= 60) { str = &quot;###&quot;; } else { str = &quot;@@@&quot;; } return str; } public void grayscale() throws IOException { File file= new File(this.inFile); BufferedImage img = ImageIO.read(file); for (int y = 0; y &lt; img.getHeight(); y++) { for (int x = 0; x &lt; img.getWidth(); x++) { int pixel = img.getRGB(x,y); Color color = new Color(pixel, true); int red = color.getRed(); int blue = color.getBlue(); int green = color.getGreen(); int grayscale = ((red + blue + green)/3); int rgb=new Color(grayscale,grayscale,grayscale).getRGB(); img.setRGB(x,y,rgb); } } ImageIO.write(img, this.ext, new File(resizedFile)); } public void greenscale() throws IOException { File file= new File(this.inFile); BufferedImage img = ImageIO.read(file); for (int y = 0; y &lt; img.getHeight(); y++) { for (int x = 0; x &lt; img.getWidth(); x++) { int pixel = img.getRGB(x,y); Color color = new Color(pixel, true); int red = color.getRed(); int blue = color.getBlue(); int green = color.getGreen(); int greenscale = ((red + blue + green)/3); int rgb=new Color(0,greenscale,0).getRGB(); img.setRGB(x,y,rgb); } } ImageIO.write(img, this.ext, new File(resizedFile)); } public void redscale() throws IOException { File file= new File(this.inFile); BufferedImage img = ImageIO.read(file); for (int y = 0; y &lt; img.getHeight(); y++) { for (int x = 0; x &lt; img.getWidth(); x++) { int pixel = img.getRGB(x,y); Color color = new Color(pixel, true); int red = color.getRed(); int blue = color.getBlue(); int green = color.getGreen(); int redscale = ((red + blue + green)/3); int rgb=new Color(redscale,0,0).getRGB(); img.setRGB(x,y,rgb); } } ImageIO.write(img, this.ext, new File(resizedFile)); } public void bluescale() throws IOException { File file= new File(this.inFile); BufferedImage img = ImageIO.read(file); for (int y = 0; y &lt; img.getHeight(); y++) { for (int x = 0; x &lt; img.getWidth(); x++) { int pixel = img.getRGB(x,y); Color color = new Color(pixel, true); int red = color.getRed(); int blue = color.getBlue(); int green = color.getGreen(); int bluescale = ((red + blue + green)/3); int rgb=new Color(0,0,bluescale).getRGB(); img.setRGB(x,y,rgb); } } ImageIO.write(img, this.ext, new File(resizedFile)); } // tester/driver public static void main(String[] args) throws IOException { Pics mogus = new Pics(&quot;mogus&quot;, &quot;jpg&quot;); mogus.printStats(&quot;Original&quot;); mogus.greenscale(); mogus.printStats(&quot;Scaled&quot;); mogus.convertToAscii(); } } Pics.main(null); . Original: 63832 616x353 images/mogus.jpg Scaled: 63832 616x353 images/mogus.jpg .",
            "url": "https://kinerboi.github.io/myFirstRepopart2/2022/10/01/ImageConverter.html",
            "relUrl": "/2022/10/01/ImageConverter.html",
            "date": " • Oct 1, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Printing out the values of Fibonacci Sequence using different methods!",
            "content": "Mr.Mort&#39;s original code . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ abstract class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ abstract protected void init(); /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . | Fibo fib = new Fibo(); Fibo is abstract; cannot be instantiated . abstract class fibonacci { //defining the class public void printValues (int count){ //function which prints the values int[] numbers = getfib(count); //getting values and storing into Array for(int i =0; i&lt;numbers.length; i++){ //for loop to reiterate code System.out.println(numbers[i]); //prints out values in each index of array } } abstract int[] getfib(int count); } . The Recursion loop for the edited code . public int fibo (int count) { if(count == 0) return 0; else if(count == 1) return 1; else return fibo(count - 1) + fibo(count - 2); } . The For loop for the edited code . class fibonacciFor extends fibonacci{ //making a class extending the main abstract class to do the for loop int[] getfib(int count) { //array to store values int[] numbers = new int[count+1]; int fib1 = 0, fib2 = 1; //defining the variables which will be assigned fibo values for (int i = 1; i &lt;= count; ++i) { //for loop which iterates // compute the next term int fibNext = fib1 + fib2; fib1 = fib2; fib2 = fibNext; numbers[i] = fibNext; //added value added into array } return numbers; //array returned } public static void main(){ fibonacciFor myFibonacciFor = new fibonacciFor(); //function printed in main myFibonacciFor.printValues(10); } } fibonacciFor.main(); //the method is ran . 0 1 2 3 5 8 13 21 34 55 89 . The While loop for the edited code . class fibonacciWhile extends fibonacci { //defining a class int index = 0; //defining an index to iterate code int[] getfib(int count) { //passing count to array get fib int[] numbers = new int[count]; //defining a new array numbers with input count int fib1 = 0, fib2 = 1; while(index &lt; count) { //makes the index run for what count equals // compute the next term int fibNext = fib1 + fib2; //passing values fib1 = fib2; fib2 = fibNext; numbers[index] = fibNext; index++; //iterating loop } return numbers; //returning array } public static void main(){ fibonacciWhile myfibonacciWhile = new fibonacciWhile(); //printing out values in main myfibonacciWhile.printValues(10); } } fibonacciWhile.main(); //running code . 1 2 3 5 8 13 21 34 55 89 . Skill sets matched . -Skill 1B was matched, as different types of iterations such as recursions, while loops and for loops were used -Skill 4B was matched, as the outputs for the different iterations was the same and everything matches -Skill 5C was matchesd as comments in code help reader understand what each segment is supposed to do .",
            "url": "https://kinerboi.github.io/myFirstRepopart2/cb/2022/09/25/Fibonacci.html",
            "relUrl": "/cb/2022/09/25/Fibonacci.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "FRQ 1",
            "content": "import java.util.Scanner; public int getDuration() { int flights; System.out.println(&quot;Please enter the time of flight departure!&quot;); Scanner input = new Scanner(System.in); System.out.println(&quot;Please enter the time of flight arrival!&quot;); Scanner input = new Scanner(System.in); if (flights == 0) { return 0; } else { double start = 0; double end = 0; double time = 0; time = end - start; return time; } } . 1a . The point of this code is to figure out whether any flights are available in the airport. The code uses an if else statement to figure that out, by using the properties of the class getDuration and then calculates the time taken for the flight based on when it departs and when it arrives. . public int getShortestLayover() { if (flights.size() &lt; 2) { return(0); } else { int shortest = getDuration(); for (int i = 0; i &lt; flights()-1; i++) { arrive = flights.getArrivalTime(); Time leave = getDepartureTime(); int layover = leave - arrival; if (layover &lt; shortest) { shortest = layover; } } return(shortest); } } . 1b . This code essentially uses an if else statement to figure out which flights are closest to when one arrives, and to do so uses a if else statement, saying that if two flights are less than 2 (two flights connecting) then the code returns 0, or else it finds the time and arrival times, calculates the layover for each array and then sorts each value based on its value, and returns it. .",
            "url": "https://kinerboi.github.io/myFirstRepopart2/cb/2022/09/17/FRQ1.html",
            "relUrl": "/cb/2022/09/17/FRQ1.html",
            "date": " • Sep 17, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "A self reflection of my goals in life!",
            "content": "Gratitude . As I’ve started to realize over the last few months, starting as a Junior but becoming even more clear as a Senior, is that people in highschool especially Del Norte are stressed over many things; grades, relationships, their mental health, and extracirriculars. Something that has popped up especially for us seniors would be college applications, the anxiety of which colleges would accept us for all of our feats in highschool, good or bad. I made this blog in order to describe what I am grateful for, and what I hope for my future as life goes on. . What Im grateful for: . -I’m grateful for living under a roof, something that many people around the world do not afford. -Even if it is a small house compared to the rest of the houses in the 4s/Del Sur area, I’m still glad to atleast be in a house -I’m grateful for living with two parents, who even though have a lot of fights stil resolve them so that I wont be affected -Im grateful for food and water, cant live without it and tastes good too -Im grateful for having close friends, I feel that this is important especially in a place like DN where many friendships are made just for academic purposes, and where a lot of people backstab each other -Im grateful for the gym and all the sports that I’ve played as a child, made me physically stronger and more athletic -Im grateful for my electronic devices, help me learn and also provide entertainment -Im grateful for all the setbacks that I have had in my life, they have given me undaunted resolve and help mentally and emotionally strengthen myself -Even though at times it can get stressful, I am also grateful for living in a great community and going to good schools such as Oak Valley Middle School and Del Norte High School, I got a great education and made good friends with whom I’ve shared the best moments of my life over the past 7 years. I cant imagine going to college without everyone from this community, its become so close-knit and I cant imagine meeting new people . My future in mind . As I leave high school and go on to adulthood and subsequently college, I will remember 4s and all the people here. However, as an ambitious person, I aim to shoot for the stars and make my own legacy, something that people all over the world will remember. Just what exaclty it is yet I do not know, but I do feel like I am destined for greatness. Some short term goals that I have for my life would be learning how to code in Java, learning more material in Mechanical and Electrical Engineering, and getting better at essay writing academically. Physically, I would like to get stronger in general, do more than 5 pullups, be able to benchpress 2 plates in one year, and become really good at lacrosse and contribute to the Varsity team. This post will serve as a reminder for all the goals that I have for myself, and will help me continue to drive forward and be the best version of myself that I possibly can be. . Things I took from video . -Perspective matters -Help others as much as I can -Dont try to close yourself off to other people, talk your emotions out . *Need to become the combination of Nikola Tesla and Baki frfr .",
            "url": "https://kinerboi.github.io/myFirstRepopart2/markdown/2022/09/10/selfreflectpost.html",
            "relUrl": "/markdown/2022/09/10/selfreflectpost.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Astrological Code to give sign and characteristics of each sign!",
            "content": "import java.util.Scanner; //importing scanning library int date = 0; //variable for date of brith public class astrologicalSign { public static void main(String[] args) { Scanner input = new Scanner(System.in); //function needed for scanning System.out.println(&quot;https://www.allure.com/story/zodiac-sign-personality-traits-dates is the source for all this info&quot;); while(true) { //in a while loop, if correct input given then break from loop.if date between certain numbers, then prints out sign and info regarding it System.out.println(&quot;Please enter the Month and day that you were born! Example - March 31st = 331&quot;); //entering date of birth int date = input.nextInt(); //scanns input if (date &gt;= 321 &amp;&amp; date &lt;= 419) { //if between March 21 and April 19 System.out.println(&quot;Congratulations, you are a Aries!&quot;); System.out.println(&quot;Represented by ram,loves to be on top, Bold and ambitious!&quot;); break; } else if (date &gt;= 420 &amp;&amp; date &lt;= 520) { //if between April 20 and May 20 System.out.println(&quot;Congratulations, you are a Taurus!&quot;); System.out.println(&quot;Represented by bull, loves luxury and comfort&quot;); break; } else if (date &gt;= 521 &amp;&amp; date &lt;= 620) { //if between May 21 and June 20 System.out.println(&quot;Congratulations, you are a Gemini!&quot;); System.out.println(&quot;Represented by Castor and Pollox, playful,spontaneous,curious&quot;); break; } else if (date &gt;= 621 &amp;&amp; date &lt;= 722) { //if between June 21 and July 22 System.out.println(&quot;Congratulations, you are a Cancer!&quot;); System.out.println(&quot;Represented by crab, emotionally invested and protective&quot;); break; } else if (date &gt;= 723 &amp;&amp; date &lt;= 822) { //if between July 23 and August 22 System.out.println(&quot;Congratulations, you are a Leo!&quot;); System.out.println(&quot;Represented by lion, loyal dramatic and fiery&quot;); break; } else if (date &gt;= 823 &amp;&amp; date &lt;= 922) { // if between August 23 and September 22 System.out.println(&quot;Congratulations, you are a Virgo!&quot;); System.out.println(&quot;Represented by godess of agriculture, smart logical and practical&quot;); break; } else if (date &gt;= 923 &amp;&amp; date &lt;= 1022) { // if between September 23 and October 22 System.out.println(&quot;Congratulations, you are a Libra!&quot;); System.out.println(&quot;Represented by scale, balanced harmonious and a holder of justice&quot;); break; } else if (date &gt;= 1023 &amp;&amp; date &lt;= 1121) { // if between October 23 and November 21 System.out.println(&quot;Congratulations, you are a Scorpio!&quot;); System.out.println(&quot;Represented by Scorpion, strong will and are reborn a lot&quot;); break; } else if (date &gt;= 1122 &amp;&amp; date &lt;= 1221) { // if between November 22 and December 21 System.out.println(&quot;Congratulations, you are a Sagittarius!&quot;); System.out.println(&quot;Represented by archer, adventorous and seeking of glory&quot;); break; } else if (date &gt;= 1222 &amp;&amp; date &lt;= 1231) { //if between December 22 and December 31 System.out.println(&quot;Congratulations, you are a Capricorn!&quot;); System.out.println(&quot;Represented by sea-goat, patient efficient and dedicated to finishing the job&quot;); break; } else if (date &gt;= 101 &amp;&amp; date &lt;= 119) { //if between January 1 and January 19 System.out.println(&quot;Congratulations, you are a Capricorn!&quot;); System.out.println(&quot;Represented by sea-goat, patient efficient and dedicated to finishing the job&quot;); break; } else if (date &gt;= 120 &amp;&amp; date &lt;= 218) { // if between January 20 and February 18 System.out.println(&quot;Congratulations, you are a Aquarius!&quot;); System.out.println(&quot;Represented by the water, innovative and revolutionary&quot;); break; } else if (date &gt;= 219 &amp;&amp; date &lt;= 320) { // if between February 19 and March 20 System.out.println(&quot;Congratulations, you are a Pisces!&quot;); System.out.println(&quot;Represented by two fish, intuitive sensitive and empathetic&quot;); break; } else { //if input not right, then restarts proccess System.out.println(&quot;Error in input, please enter again!&quot;); } } } } . astrologicalSign.main(null); . https://www.allure.com/story/zodiac-sign-personality-traits-dates is the source for all this info Please enter the Month and day that you were born! Example - March 31st = 331 Congratulations, you are a Aries! Represented by ram,loves to be on top, Bold and ambitious! . Explaination . The point of if statements are to do certain commands if certain parameters are met. For example in this code, A person inputs the date of their birth, and the if and else if statements check whether that input meets the requirements of the statemen. If it does, then the code goes into the code and does whatever needs to be done if the conditions are met; In this case, the star sign of the person is outputed. The else statement tells what to do if the input is not right, and acts accordingly. In this case, the else statement forces the user to input a correct value after printing error. . import java.util.Scanner; //importing scanning library int date = 0; //variable for date of brith int value = 0; public class astrologicalSign2 { public static void main(String[] args) { Scanner input = new Scanner(System.in); //function needed for scanning System.out.println(&quot;https://www.allure.com/story/zodiac-sign-personality-traits-dates is the source for all this info&quot;); System.out.println(&quot;Please enter the Month and day that you were born! Example - March 31st = 331&quot;); //entering date of birth int date = input.nextInt(); //scanns input if (date &gt;= 321 &amp;&amp; date &lt;= 419) { //if between March 21 and April 19 value = 1; } else if (date &gt;= 420 &amp;&amp; date &lt;= 520) { //if between April 20 and May 20 value = 2; } else if (date &gt;= 521 &amp;&amp; date &lt;= 620) { //if between May 21 and June 20 value = 3; } else if (date &gt;= 621 &amp;&amp; date &lt;= 722) { //if between June 21 and July 22 value = 4; } else if (date &gt;= 723 &amp;&amp; date &lt;= 822) { //if between July 23 and August 22 value = 5; } else if (date &gt;= 823 &amp;&amp; date &lt;= 922) { // if between August 23 and September 22 value = 6; } else if (date &gt;= 923 &amp;&amp; date &lt;= 1022) { // if between September 23 and October 22 value = 7; } else if (date &gt;= 1023 &amp;&amp; date &lt;= 1121) { // if between October 23 and November 21 value = 8; } else if (date &gt;= 1122 &amp;&amp; date &lt;= 1221) { // if between November 22 and December 21 value = 9; } else if (date &gt;= 1222 &amp;&amp; date &lt;= 1231) { //if between December 22 and December 31 value = 10; } else if (date &gt;= 101 &amp;&amp; date &lt;= 119) { //if between January 1 and January 19 value = 11; } else if (date &gt;= 120 &amp;&amp; date &lt;= 218) { // if between January 20 and February 18 value = 12; } else if (date &gt;= 219 &amp;&amp; date &lt;= 320) { // if between February 19 and March 20 value = 13; } else { //if input not right, then restarts proccess value = 0; } switch (value) { //switch case with values case 1: //if value equals particular case, then commands printed System.out.println(&quot;Congratulations, you are a Aries!&quot;); System.out.println(&quot;Represented by ram,loves to be on top, Bold and ambitious!&quot;); break; case 2: System.out.println(&quot;Congratulations, you are a Taurus!&quot;); System.out.println(&quot;Represented by bull, loves luxury and comfort&quot;); break; case 3: System.out.println(&quot;Congratulations, you are a Gemini!&quot;); System.out.println(&quot;Represented by Castor and Pollox, playful,spontaneous,curious&quot;); break; case 4: System.out.println(&quot;Congratulations, you are a Cancer!&quot;); System.out.println(&quot;Represented by crab, emotionally invested and protective&quot;); break; case 5: System.out.println(&quot;Congratulations, you are a Leo!&quot;); System.out.println(&quot;Represented by lion, loyal dramatic and fiery&quot;); break; case 6: System.out.println(&quot;Congratulations, you are a Virgo!&quot;); System.out.println(&quot;Represented by godess of agriculture, smart logical and practical&quot;); break; case 7: System.out.println(&quot;Congratulations, you are a Libra!&quot;); System.out.println(&quot;Represented by scale, balanced harmonious and a holder of justice&quot;); break; case 8: System.out.println(&quot;Congratulations, you are a Scorpio!&quot;); System.out.println(&quot;Represented by Scorpion, strong will and are reborn a lot&quot;); break; case 9: System.out.println(&quot;Congratulations, you are a Sagittarius!&quot;); System.out.println(&quot;Represented by archer, adventorous and seeking of glory&quot;); break; case 10: System.out.println(&quot;Congratulations, you are a Capricorn!&quot;); System.out.println(&quot;Represented by sea-goat, patient efficient and dedicated to finishing the job&quot;); break; case 11: System.out.println(&quot;Congratulations, you are a Capricorn!&quot;); System.out.println(&quot;Represented by sea-goat, patient efficient and dedicated to finishing the job&quot;); break; case 12: System.out.println(&quot;Congratulations, you are a Aquarius!&quot;); System.out.println(&quot;Represented by the water, innovative and revolutionary&quot;); break; case 13: System.out.println(&quot;Congratulations, you are a Pisces!&quot;); System.out.println(&quot;Represented by two fish, intuitive sensitive and empathetic&quot;); break; case 0: System.out.println(&quot;Error in input, please enter again!&quot;); //add defaut } } } . astrologicalSign2.main(null); . https://www.allure.com/story/zodiac-sign-personality-traits-dates is the source for all this info Please enter the Month and day that you were born! Example - March 31st = 331 Congratulations, you are a Cancer! Represented by crab, emotionally invested and protective . Explaination . The point of switch cases statements are to do certain commands if certain parameters are met. For example in this code, A person inputs the date of their birth, and if the date of birth falls within a certain range, the swtich command respective to that range is activated and returns the output, in this case a print function telling the star sign and the values of it. It is similar to if and else statements, but instead of having an else statement just executes the commands which are defined under the switch ranges. As switch cases do not support ranges, an if statement with a new variable called value is needed in order to give the ranges a particlar value, something which can be called into the switch case. . De Morgan&#39;s law . According to cuemath.com, &quot;According to De Morgan&#39;s Law, the complement of the union of two sets will be equal to the intersection of their individual complements. Additionally, the complement of the intersection of two sets will be equal to the union of their individual complements.&quot; One example of De Morgan&#39;s law would be saying that you like both Infinity War and Endgame, or saying that you like Infinity War and you like Endgame. These two statements express the same thought. De Morgan&#39;s law will be expressed in code below, which uses two conditions to check input; essentially the same as checking each condition one at a time. De Morgan&#39;s law in code can be exemplified with %% (and) and || (or) conditions, to check whether conditions are correct . import java.util.Scanner; int value = 0; public class feeling { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.println(&quot;Enter how youre feeling today from 1-10!&quot;); int value = input.nextInt(); if(value &gt;= 1 &amp;&amp; value &lt;=3 ) { System.out.println(&quot;Aww, I hope youre feeling better!&quot;); } else if(value &gt;=4 &amp;&amp; value &lt;=6) { System.out.println(&quot;Its fine to have a normal day!&quot;); } else if(value &gt;=7 &amp;&amp; value &lt;=10) { System.out.println(&quot;Thats good that you are having a good day!&quot;); } } } . feeling.main(null); . Enter how youre feeling today from 1-10! Its fine to have a normal day! .",
            "url": "https://kinerboi.github.io/myFirstRepopart2/cb/2022/09/10/If-statement.html",
            "relUrl": "/cb/2022/09/10/If-statement.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Amongus Impostors identification array",
            "content": "import java.util.*; class Amogus { //The area between class definition and the 1st method is where we keep data for object in Java private String [][] amogus; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public Amogus () { //Storing Data in 2D arrays amogus = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) { &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣤⣤⣤⣤⣤⣶⣦⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, //subsystems of amogus &quot;⠀⠀⠀⠀⠀⠀⢀⣴⣿⡿⠛⠉⠙⠛⠛⠛⠛⠻⢿⣿⣷⣤⡀⠀⠀⠀⠀⠀&quot;, &quot; ⣼⣿⠋⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⠈⢻⣿⣿⡄⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⣸⣿⡏⠀⠀⠀⣠⣶⣾⣿⣿⣿⠿⠿⠿⢿⣿⣿⣿⣄⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⣿⣿⠁⠀⠀⢰⣿⣿⣯⠁⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣷⡄⠀&quot;, &quot;⠀⠀⣀⣤⣴⣶⣶⣿⡟⠀⠀⠀⢸⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣷⠀&quot;, &quot;⠀⢰⣿⡟⠋⠉⣹⣿⡇⠀⠀⠀⠘⣿⣿⣿⣿⣷⣦⣤⣤⣤⣶⣶⣶⣶⣿⣿⣿⠀&quot;, &quot;⠀⢸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀&quot;, &quot;⠀⣸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠉⠻⠿⣿⣿⣿⣿⡿⠿⠿⠛⢻⣿⡇⠀⠀&quot;, &quot;⠀⣿⣿⠁⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣧⠀⠀&quot;, &quot;⠀⣿⣿⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀&quot;, &quot;⠀⣿⣿⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀&quot;, &quot;⠀⢿⣿⡆⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡇⠀⠀&quot;, &quot;⠀⠸⣿⣧⡀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠃⠀⠀&quot;, &quot;⠀⠀⠛⢿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⣰⣿⣿⣷⣶⣶⣶⣶⠶⠀⢠⣿⣿⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⣽⣿⡏⠁⠀⠀⢸⣿⡇⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⢹⣿⡆⠀⠀⠀⣸⣿⠇⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⢿⣿⣦⣄⣀⣠⣴⣿⣿⠁⠀⠈⠻⣿⣿⣿⣿⡿⠏⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠈⠛⠻⠿⠿⠿⠿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot; }, { &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣤⣤⣤⣤⣤⣶⣦⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⢀⣴⣿⡿⠛⠉⠙⠛⠛⠛⠛⠻⢿⣿⣷⣤⡀⠀⠀⠀⠀⠀&quot;, &quot; ⣼⣿⠋⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⠈⢻⣿⣿⡄⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⣸⣿⡏⠀⠀⠀⣠⣶⣾⣿⣿⣿⠿⠿⠿⢿⣿⣿⣿⣄⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⣿⣿⠁⠀⠀⢰⣿⣿⣯⠁⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣷⡄⠀&quot;, &quot;⠀⠀⣀⣤⣴⣶⣶⣿⡟⠀⠀⠀⢸⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣷⠀&quot;, &quot;⠀⢰⣿⡟⠋⠉⣹⣿⡇⠀⠀⠀⠘⣿⣿⣿⣿⣷⣦⣤⣤⣤⣶⣶⣶⣶⣿⣿⣿⠀&quot;, &quot;⠀⢸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀&quot;, &quot;⠀⣸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠉⠻⠿⣿⣿⣿⣿⡿⠿⠿⠛⢻⣿⡇⠀⠀&quot;, &quot;⠀⣿⣿⠁⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣧⠀⠀&quot;, &quot;⠀⣿⣿⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀&quot;, &quot;⠀⣿⣿⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀&quot;, &quot;⠀⢿⣿⡆⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡇⠀⠀&quot;, &quot;⠀⠸⣿⣧⡀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠃⠀⠀&quot;, &quot;⠀⠀⠛⢿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⣰⣿⣿⣷⣶⣶⣶⣶⠶⠀⢠⣿⣿⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⣽⣿⡏⠁⠀⠀⢸⣿⡇⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⢹⣿⡆⠀⠀⠀⣸⣿⠇⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⢿⣿⣦⣄⣀⣠⣴⣿⣿⠁⠀⠈⠻⣿⣿⣿⣿⡿⠏⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠈⠛⠻⠿⠿⠿⠿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot; }, { &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣤⣤⣤⣤⣤⣶⣦⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀&quot;, &quot; ⠀⠀⠀⠀⠀⠀⢀⣴⣿⡿⠛⠉⠙⠛⠛⠛⠛⠻⢿⣿⣷⣤⡀⠀⠀⠀⠀⠀&quot;, &quot; ⣼⣿⠋⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⠈⢻⣿⣿⡄⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⣸⣿⡏⠀⠀⠀⣠⣶⣾⣿⣿⣿⠿⠿⠿⢿⣿⣿⣿⣄⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⣿⣿⠁⠀⠀⢰⣿⣿⣯⠁⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣷⡄⠀&quot;, &quot;⠀⠀⣀⣤⣴⣶⣶⣿⡟⠀⠀⠀⢸⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣷⠀&quot;, &quot;⠀⢰⣿⡟⠋⠉⣹⣿⡇⠀⠀⠀⠘⣿⣿⣿⣿⣷⣦⣤⣤⣤⣶⣶⣶⣶⣿⣿⣿⠀&quot;, &quot;⠀⢸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀&quot;, &quot;⠀⣸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠉⠻⠿⣿⣿⣿⣿⡿⠿⠿⠛⢻⣿⡇⠀⠀&quot;, &quot;⠀⣿⣿⠁⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣧⠀⠀&quot;, &quot;⠀⣿⣿⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀&quot;, &quot;⠀⣿⣿⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀&quot;, &quot;⠀⢿⣿⡆⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡇⠀⠀&quot;, &quot;⠀⠸⣿⣧⡀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠃⠀⠀&quot;, &quot;⠀⠀⠛⢿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⣰⣿⣿⣷⣶⣶⣶⣶⠶⠀⢠⣿⣿⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⣽⣿⡏⠁⠀⠀⢸⣿⡇⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⢹⣿⡆⠀⠀⠀⣸⣿⠇⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⢿⣿⣦⣄⣀⣠⣴⣿⣿⠁⠀⠈⠻⣿⣿⣿⣿⡿⠏⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠈⠛⠻⠿⠿⠿⠿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot; }, { &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣤⣤⣤⣤⣤⣶⣦⣤⣄⡀⠀⠀⠀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⡿⠛⠉⠙⠛⠛⠛⠛⠻⢿⣿⣷⣤⡀⠀⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⠋⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⠈⢻⣿⣿⡄⠀⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⣸⣿⡏⠀⠀⠀⣠⣶⣾⣿⣿⣿⠿⠿⠿⢿⣿⣿⣿⣄⠀&quot;, &quot; ⣿⣿⠁⠀⠀⢰⣿⣿⣯⠁⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⡄&quot;, &quot;⣀⣤⣴⣶⣶⣿⡟⠀⠀⠀⢸⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷&quot;, &quot;⢰⣿⡟⠋⠉⣹⣿⡇⠀⠀⠀⠘⣿⣿⣿⣿⣷⣦⣤⣤⣤⣶⣶⣶⣶⣿⣿&quot;, &quot;⢸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿&quot;, &quot;⣸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠉⠻⠿⣿⣿⣿⣿⡿⠿⠿⠛⢻⣿⡇&quot;, &quot;⣿⣿⠁⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣧ ⠀⣿⣿⠀⠀⠀⣿⣿⡇⠀⣿⣿⡇⠀⣿⣿⡇⠀⣿⣿⡇⠀⠀⠀⠀⣿⣿⡇⠀⠀⣿⣿⡇⢸⣿⣿&quot;, &quot;⣿⣿⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿ ⠀⢿⣿⡆⠀⠀⣿⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⣿⣿⡇⠀⠀⢸⣿&quot;, &quot;⠸⣿⣧⡀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠃&quot;, &quot;⠀⠛⢿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⣰⣿⣿⣷⣶⣶⣶⣶⠶⠀⢠⣿⣿⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⣽⣿⡏⠁⠀⠀⢸⣿⡇⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⢹⣿⡆⠀⠀⠀⣸⣿⠇⠀&quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⢿⣿⣦⣄⣀⣠⣴⣿⣿⠁⠀⠈⠻⣿⣿⣿⣿⡿⠏⠀⠀&quot;, &quot; ⠈⠛⠻⠿⠿⠿⠿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀&quot;, }, { &quot;⠀⠀⠀⠀⢀⠄⠂⠓⠢⢄⡀⢀⠔⠋⠙⢦⡀ &quot;, &quot;⠀⠀⠀⠀⠘⣇⠀⠀⠀⠀⠀⠉⠀⠀⠀⠀⠀⠀⢸ &quot;, &quot;⠀⠀⠀⠀⠀⠀⠀⠀⠈⢹⠀⠀⠀⠀⢰⠈⠁ &quot;, &quot;⢠⡒⠊⡭⠛⠓⠒⠒⠒⢺⡀⠀⠀⠀⣸⠒⠒⠉⠉⠭⢍⡑⠒⢤⣉⣉⡀&quot;, &quot;⢸⠉⠢⣌⣑⠒⠲⠤⠤⠤⠉⢉⠩⠭⠤⠤⠤⠤⠐⢒⣈⣀⠤⠚⣧⠀⠀⡇&quot;, &quot;⢸⠀⠀⠀⠈⠉⠉⠙⠒⠒⠒⠒⠚⠋⠉⠉⠉⠉⠉⠉⠀⠀⢸⠀⠀⠀⠀⠀⣷&quot;, &quot;⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⣿&quot;, &quot;⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⡏&quot;, &quot;⢸⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⡇&quot;, &quot;⢸⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⢸&quot;, &quot;⠀⡇⠑⢤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣏⣀⣀⠤⠔⠉&quot;, &quot;⢱⠀⠀⠈⠑⠒⠦⠤⠤⢤⠤⢤⠤⠤⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇ &quot;, &quot;⠙⠒⠒⠖⠒⠒⠒⠒⠉⠀⠸⡄⠀⠀⠀⠀⠀⠀⠀⠀⢀⡎ &quot;, &quot; ⠒⠒⠖⠒⠒⠒⠒&quot; } }; } public void printPoem () { for (int astronaut = 3; astronaut &gt;= 1; astronaut--) { //for loop makes it run 3 times, because 3 amogus System.out.println(&quot;There are &quot; + astronaut + &quot; innocent amogus n&quot;); for (int array1 = 0; array1&lt; astronaut; array1++) { //index for first dimension of array (printing all lines) for (int array2 = 0; array2&lt; amogus[array1].length; array2++) { //index for second dimension (printing all dots) System.out.println(amogus[array1][array2] + &quot; &quot;); //printing out the array for amogus } System.out.println(); //prints space } System.out.println(&quot;Then the impostor kills one of them&quot;); //everytime loop runs prints this for (int count = 0; count&lt;amogus[3].length; count++) { System.out.println(amogus[3][count]); //prints out third subsystem of amogus (imposter) } for (int count2 = 0; count2&lt;amogus[4].length; count2++) { //prints out 4th subsystem of amogus (dead one) System.out.println(amogus[4][count2]); } System.out.println(); System.out.println(&quot;Now there are &quot; + (astronaut-1) + &quot; amogus n&quot;); //looped to state how many amogus are left } System.out.println(&quot;IMPOSTOR WINS&quot;); //printed when finished } } . Amogus myAmogus = new Amogus(); myAmogus.printPoem(); . There are 3 innocent amogus ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣤⣤⣤⣤⣤⣶⣦⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⢀⣴⣿⡿⠛⠉⠙⠛⠛⠛⠛⠻⢿⣿⣷⣤⡀⠀⠀⠀⠀⠀ ⣼⣿⠋⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⠈⢻⣿⣿⡄⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⣸⣿⡏⠀⠀⠀⣠⣶⣾⣿⣿⣿⠿⠿⠿⢿⣿⣿⣿⣄⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⣿⣿⠁⠀⠀⢰⣿⣿⣯⠁⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣷⡄⠀ ⠀⠀⣀⣤⣴⣶⣶⣿⡟⠀⠀⠀⢸⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣷⠀ ⠀⢰⣿⡟⠋⠉⣹⣿⡇⠀⠀⠀⠘⣿⣿⣿⣿⣷⣦⣤⣤⣤⣶⣶⣶⣶⣿⣿⣿⠀ ⠀⢸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀ ⠀⣸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠉⠻⠿⣿⣿⣿⣿⡿⠿⠿⠛⢻⣿⡇⠀⠀ ⠀⣿⣿⠁⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣧⠀⠀ ⠀⣿⣿⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀ ⠀⣿⣿⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀ ⠀⢿⣿⡆⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡇⠀⠀ ⠀⠸⣿⣧⡀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠃⠀⠀ ⠀⠀⠛⢿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⣰⣿⣿⣷⣶⣶⣶⣶⠶⠀⢠⣿⣿⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⣽⣿⡏⠁⠀⠀⢸⣿⡇⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⢹⣿⡆⠀⠀⠀⣸⣿⠇⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⢿⣿⣦⣄⣀⣠⣴⣿⣿⠁⠀⠈⠻⣿⣿⣿⣿⡿⠏⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠈⠛⠻⠿⠿⠿⠿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣤⣤⣤⣤⣤⣶⣦⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⢀⣴⣿⡿⠛⠉⠙⠛⠛⠛⠛⠻⢿⣿⣷⣤⡀⠀⠀⠀⠀⠀ ⣼⣿⠋⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⠈⢻⣿⣿⡄⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⣸⣿⡏⠀⠀⠀⣠⣶⣾⣿⣿⣿⠿⠿⠿⢿⣿⣿⣿⣄⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⣿⣿⠁⠀⠀⢰⣿⣿⣯⠁⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣷⡄⠀ ⠀⠀⣀⣤⣴⣶⣶⣿⡟⠀⠀⠀⢸⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣷⠀ ⠀⢰⣿⡟⠋⠉⣹⣿⡇⠀⠀⠀⠘⣿⣿⣿⣿⣷⣦⣤⣤⣤⣶⣶⣶⣶⣿⣿⣿⠀ ⠀⢸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀ ⠀⣸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠉⠻⠿⣿⣿⣿⣿⡿⠿⠿⠛⢻⣿⡇⠀⠀ ⠀⣿⣿⠁⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣧⠀⠀ ⠀⣿⣿⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀ ⠀⣿⣿⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀ ⠀⢿⣿⡆⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡇⠀⠀ ⠀⠸⣿⣧⡀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠃⠀⠀ ⠀⠀⠛⢿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⣰⣿⣿⣷⣶⣶⣶⣶⠶⠀⢠⣿⣿⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⣽⣿⡏⠁⠀⠀⢸⣿⡇⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⢹⣿⡆⠀⠀⠀⣸⣿⠇⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⢿⣿⣦⣄⣀⣠⣴⣿⣿⠁⠀⠈⠻⣿⣿⣿⣿⡿⠏⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠈⠛⠻⠿⠿⠿⠿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣤⣤⣤⣤⣤⣶⣦⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⢀⣴⣿⡿⠛⠉⠙⠛⠛⠛⠛⠻⢿⣿⣷⣤⡀⠀⠀⠀⠀⠀ ⣼⣿⠋⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⠈⢻⣿⣿⡄⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⣸⣿⡏⠀⠀⠀⣠⣶⣾⣿⣿⣿⠿⠿⠿⢿⣿⣿⣿⣄⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⣿⣿⠁⠀⠀⢰⣿⣿⣯⠁⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣷⡄⠀ ⠀⠀⣀⣤⣴⣶⣶⣿⡟⠀⠀⠀⢸⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣷⠀ ⠀⢰⣿⡟⠋⠉⣹⣿⡇⠀⠀⠀⠘⣿⣿⣿⣿⣷⣦⣤⣤⣤⣶⣶⣶⣶⣿⣿⣿⠀ ⠀⢸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀ ⠀⣸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠉⠻⠿⣿⣿⣿⣿⡿⠿⠿⠛⢻⣿⡇⠀⠀ ⠀⣿⣿⠁⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣧⠀⠀ ⠀⣿⣿⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀ ⠀⣿⣿⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀ ⠀⢿⣿⡆⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡇⠀⠀ ⠀⠸⣿⣧⡀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠃⠀⠀ ⠀⠀⠛⢿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⣰⣿⣿⣷⣶⣶⣶⣶⠶⠀⢠⣿⣿⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⣽⣿⡏⠁⠀⠀⢸⣿⡇⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⢹⣿⡆⠀⠀⠀⣸⣿⠇⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⢿⣿⣦⣄⣀⣠⣴⣿⣿⠁⠀⠈⠻⣿⣿⣿⣿⡿⠏⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠈⠛⠻⠿⠿⠿⠿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ Then the impostor kills one of them ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣤⣤⣤⣤⣤⣶⣦⣤⣄⡀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⡿⠛⠉⠙⠛⠛⠛⠛⠻⢿⣿⣷⣤⡀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⠋⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⠈⢻⣿⣿⡄⠀⠀ ⠀⠀⠀⠀⠀⠀⣸⣿⡏⠀⠀⠀⣠⣶⣾⣿⣿⣿⠿⠿⠿⢿⣿⣿⣿⣄⠀ ⣿⣿⠁⠀⠀⢰⣿⣿⣯⠁⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⡄ ⣀⣤⣴⣶⣶⣿⡟⠀⠀⠀⢸⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷ ⢰⣿⡟⠋⠉⣹⣿⡇⠀⠀⠀⠘⣿⣿⣿⣿⣷⣦⣤⣤⣤⣶⣶⣶⣶⣿⣿ ⢸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿ ⣸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠉⠻⠿⣿⣿⣿⣿⡿⠿⠿⠛⢻⣿⡇ ⣿⣿⠁⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣧ ⠀⣿⣿⠀⠀⠀⣿⣿⡇⠀⣿⣿⡇⠀⣿⣿⡇⠀⣿⣿⡇⠀⠀⠀⠀⣿⣿⡇⠀⠀⣿⣿⡇⢸⣿⣿ ⣿⣿⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿ ⠀⢿⣿⡆⠀⠀⣿⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⣿⣿⡇⠀⠀⢸⣿ ⠸⣿⣧⡀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠃ ⠀⠛⢿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⣰⣿⣿⣷⣶⣶⣶⣶⠶⠀⢠⣿⣿⠀ ⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⣽⣿⡏⠁⠀⠀⢸⣿⡇⠀ ⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⢹⣿⡆⠀⠀⠀⣸⣿⠇⠀ ⠀⠀⠀⠀⠀⠀⠀⢿⣿⣦⣄⣀⣠⣴⣿⣿⠁⠀⠈⠻⣿⣿⣿⣿⡿⠏⠀⠀ ⠈⠛⠻⠿⠿⠿⠿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⢀⠄⠂⠓⠢⢄⡀⢀⠔⠋⠙⢦⡀ ⠀⠀⠀⠀⠘⣇⠀⠀⠀⠀⠀⠉⠀⠀⠀⠀⠀⠀⢸ ⠀⠀⠀⠀⠀⠀⠀⠀⠈⢹⠀⠀⠀⠀⢰⠈⠁ ⢠⡒⠊⡭⠛⠓⠒⠒⠒⢺⡀⠀⠀⠀⣸⠒⠒⠉⠉⠭⢍⡑⠒⢤⣉⣉⡀ ⢸⠉⠢⣌⣑⠒⠲⠤⠤⠤⠉⢉⠩⠭⠤⠤⠤⠤⠐⢒⣈⣀⠤⠚⣧⠀⠀⡇ ⢸⠀⠀⠀⠈⠉⠉⠙⠒⠒⠒⠒⠚⠋⠉⠉⠉⠉⠉⠉⠀⠀⢸⠀⠀⠀⠀⠀⣷ ⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⣿ ⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⡏ ⢸⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⡇ ⢸⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⢸ ⠀⡇⠑⢤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣏⣀⣀⠤⠔⠉ ⢱⠀⠀⠈⠑⠒⠦⠤⠤⢤⠤⢤⠤⠤⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇ ⠙⠒⠒⠖⠒⠒⠒⠒⠉⠀⠸⡄⠀⠀⠀⠀⠀⠀⠀⠀⢀⡎ ⠒⠒⠖⠒⠒⠒⠒ Now there are 2 amogus There are 2 innocent amogus ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣤⣤⣤⣤⣤⣶⣦⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⢀⣴⣿⡿⠛⠉⠙⠛⠛⠛⠛⠻⢿⣿⣷⣤⡀⠀⠀⠀⠀⠀ ⣼⣿⠋⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⠈⢻⣿⣿⡄⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⣸⣿⡏⠀⠀⠀⣠⣶⣾⣿⣿⣿⠿⠿⠿⢿⣿⣿⣿⣄⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⣿⣿⠁⠀⠀⢰⣿⣿⣯⠁⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣷⡄⠀ ⠀⠀⣀⣤⣴⣶⣶⣿⡟⠀⠀⠀⢸⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣷⠀ ⠀⢰⣿⡟⠋⠉⣹⣿⡇⠀⠀⠀⠘⣿⣿⣿⣿⣷⣦⣤⣤⣤⣶⣶⣶⣶⣿⣿⣿⠀ ⠀⢸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀ ⠀⣸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠉⠻⠿⣿⣿⣿⣿⡿⠿⠿⠛⢻⣿⡇⠀⠀ ⠀⣿⣿⠁⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣧⠀⠀ ⠀⣿⣿⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀ ⠀⣿⣿⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀ ⠀⢿⣿⡆⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡇⠀⠀ ⠀⠸⣿⣧⡀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠃⠀⠀ ⠀⠀⠛⢿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⣰⣿⣿⣷⣶⣶⣶⣶⠶⠀⢠⣿⣿⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⣽⣿⡏⠁⠀⠀⢸⣿⡇⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⢹⣿⡆⠀⠀⠀⣸⣿⠇⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⢿⣿⣦⣄⣀⣠⣴⣿⣿⠁⠀⠈⠻⣿⣿⣿⣿⡿⠏⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠈⠛⠻⠿⠿⠿⠿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣤⣤⣤⣤⣤⣶⣦⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⢀⣴⣿⡿⠛⠉⠙⠛⠛⠛⠛⠻⢿⣿⣷⣤⡀⠀⠀⠀⠀⠀ ⣼⣿⠋⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⠈⢻⣿⣿⡄⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⣸⣿⡏⠀⠀⠀⣠⣶⣾⣿⣿⣿⠿⠿⠿⢿⣿⣿⣿⣄⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⣿⣿⠁⠀⠀⢰⣿⣿⣯⠁⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣷⡄⠀ ⠀⠀⣀⣤⣴⣶⣶⣿⡟⠀⠀⠀⢸⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣷⠀ ⠀⢰⣿⡟⠋⠉⣹⣿⡇⠀⠀⠀⠘⣿⣿⣿⣿⣷⣦⣤⣤⣤⣶⣶⣶⣶⣿⣿⣿⠀ ⠀⢸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀ ⠀⣸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠉⠻⠿⣿⣿⣿⣿⡿⠿⠿⠛⢻⣿⡇⠀⠀ ⠀⣿⣿⠁⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣧⠀⠀ ⠀⣿⣿⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀ ⠀⣿⣿⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀ ⠀⢿⣿⡆⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡇⠀⠀ ⠀⠸⣿⣧⡀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠃⠀⠀ ⠀⠀⠛⢿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⣰⣿⣿⣷⣶⣶⣶⣶⠶⠀⢠⣿⣿⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⣽⣿⡏⠁⠀⠀⢸⣿⡇⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⢹⣿⡆⠀⠀⠀⣸⣿⠇⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⢿⣿⣦⣄⣀⣠⣴⣿⣿⠁⠀⠈⠻⣿⣿⣿⣿⡿⠏⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠈⠛⠻⠿⠿⠿⠿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ Then the impostor kills one of them ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣤⣤⣤⣤⣤⣶⣦⣤⣄⡀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⡿⠛⠉⠙⠛⠛⠛⠛⠻⢿⣿⣷⣤⡀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⠋⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⠈⢻⣿⣿⡄⠀⠀ ⠀⠀⠀⠀⠀⠀⣸⣿⡏⠀⠀⠀⣠⣶⣾⣿⣿⣿⠿⠿⠿⢿⣿⣿⣿⣄⠀ ⣿⣿⠁⠀⠀⢰⣿⣿⣯⠁⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⡄ ⣀⣤⣴⣶⣶⣿⡟⠀⠀⠀⢸⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷ ⢰⣿⡟⠋⠉⣹⣿⡇⠀⠀⠀⠘⣿⣿⣿⣿⣷⣦⣤⣤⣤⣶⣶⣶⣶⣿⣿ ⢸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿ ⣸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠉⠻⠿⣿⣿⣿⣿⡿⠿⠿⠛⢻⣿⡇ ⣿⣿⠁⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣧ ⠀⣿⣿⠀⠀⠀⣿⣿⡇⠀⣿⣿⡇⠀⣿⣿⡇⠀⣿⣿⡇⠀⠀⠀⠀⣿⣿⡇⠀⠀⣿⣿⡇⢸⣿⣿ ⣿⣿⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿ ⠀⢿⣿⡆⠀⠀⣿⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⣿⣿⡇⠀⠀⢸⣿ ⠸⣿⣧⡀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠃ ⠀⠛⢿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⣰⣿⣿⣷⣶⣶⣶⣶⠶⠀⢠⣿⣿⠀ ⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⣽⣿⡏⠁⠀⠀⢸⣿⡇⠀ ⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⢹⣿⡆⠀⠀⠀⣸⣿⠇⠀ ⠀⠀⠀⠀⠀⠀⠀⢿⣿⣦⣄⣀⣠⣴⣿⣿⠁⠀⠈⠻⣿⣿⣿⣿⡿⠏⠀⠀ ⠈⠛⠻⠿⠿⠿⠿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⢀⠄⠂⠓⠢⢄⡀⢀⠔⠋⠙⢦⡀ ⠀⠀⠀⠀⠘⣇⠀⠀⠀⠀⠀⠉⠀⠀⠀⠀⠀⠀⢸ ⠀⠀⠀⠀⠀⠀⠀⠀⠈⢹⠀⠀⠀⠀⢰⠈⠁ ⢠⡒⠊⡭⠛⠓⠒⠒⠒⢺⡀⠀⠀⠀⣸⠒⠒⠉⠉⠭⢍⡑⠒⢤⣉⣉⡀ ⢸⠉⠢⣌⣑⠒⠲⠤⠤⠤⠉⢉⠩⠭⠤⠤⠤⠤⠐⢒⣈⣀⠤⠚⣧⠀⠀⡇ ⢸⠀⠀⠀⠈⠉⠉⠙⠒⠒⠒⠒⠚⠋⠉⠉⠉⠉⠉⠉⠀⠀⢸⠀⠀⠀⠀⠀⣷ ⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⣿ ⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⡏ ⢸⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⡇ ⢸⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⢸ ⠀⡇⠑⢤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣏⣀⣀⠤⠔⠉ ⢱⠀⠀⠈⠑⠒⠦⠤⠤⢤⠤⢤⠤⠤⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇ ⠙⠒⠒⠖⠒⠒⠒⠒⠉⠀⠸⡄⠀⠀⠀⠀⠀⠀⠀⠀⢀⡎ ⠒⠒⠖⠒⠒⠒⠒ Now there are 1 amogus There are 1 innocent amogus ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣤⣤⣤⣤⣤⣶⣦⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⢀⣴⣿⡿⠛⠉⠙⠛⠛⠛⠛⠻⢿⣿⣷⣤⡀⠀⠀⠀⠀⠀ ⣼⣿⠋⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⠈⢻⣿⣿⡄⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⣸⣿⡏⠀⠀⠀⣠⣶⣾⣿⣿⣿⠿⠿⠿⢿⣿⣿⣿⣄⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⣿⣿⠁⠀⠀⢰⣿⣿⣯⠁⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣷⡄⠀ ⠀⠀⣀⣤⣴⣶⣶⣿⡟⠀⠀⠀⢸⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣷⠀ ⠀⢰⣿⡟⠋⠉⣹⣿⡇⠀⠀⠀⠘⣿⣿⣿⣿⣷⣦⣤⣤⣤⣶⣶⣶⣶⣿⣿⣿⠀ ⠀⢸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀ ⠀⣸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠉⠻⠿⣿⣿⣿⣿⡿⠿⠿⠛⢻⣿⡇⠀⠀ ⠀⣿⣿⠁⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣧⠀⠀ ⠀⣿⣿⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀ ⠀⣿⣿⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀ ⠀⢿⣿⡆⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡇⠀⠀ ⠀⠸⣿⣧⡀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠃⠀⠀ ⠀⠀⠛⢿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⣰⣿⣿⣷⣶⣶⣶⣶⠶⠀⢠⣿⣿⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⣽⣿⡏⠁⠀⠀⢸⣿⡇⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⢹⣿⡆⠀⠀⠀⣸⣿⠇⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⢿⣿⣦⣄⣀⣠⣴⣿⣿⠁⠀⠈⠻⣿⣿⣿⣿⡿⠏⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠈⠛⠻⠿⠿⠿⠿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ Then the impostor kills one of them ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣤⣤⣤⣤⣤⣶⣦⣤⣄⡀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⡿⠛⠉⠙⠛⠛⠛⠛⠻⢿⣿⣷⣤⡀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⠋⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⠈⢻⣿⣿⡄⠀⠀ ⠀⠀⠀⠀⠀⠀⣸⣿⡏⠀⠀⠀⣠⣶⣾⣿⣿⣿⠿⠿⠿⢿⣿⣿⣿⣄⠀ ⣿⣿⠁⠀⠀⢰⣿⣿⣯⠁⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⡄ ⣀⣤⣴⣶⣶⣿⡟⠀⠀⠀⢸⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷ ⢰⣿⡟⠋⠉⣹⣿⡇⠀⠀⠀⠘⣿⣿⣿⣿⣷⣦⣤⣤⣤⣶⣶⣶⣶⣿⣿ ⢸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿ ⣸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠉⠻⠿⣿⣿⣿⣿⡿⠿⠿⠛⢻⣿⡇ ⣿⣿⠁⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣧ ⠀⣿⣿⠀⠀⠀⣿⣿⡇⠀⣿⣿⡇⠀⣿⣿⡇⠀⣿⣿⡇⠀⠀⠀⠀⣿⣿⡇⠀⠀⣿⣿⡇⢸⣿⣿ ⣿⣿⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿ ⠀⢿⣿⡆⠀⠀⣿⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⣿⣿⡇⠀⠀⢸⣿ ⠸⣿⣧⡀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠃ ⠀⠛⢿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⣰⣿⣿⣷⣶⣶⣶⣶⠶⠀⢠⣿⣿⠀ ⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⣽⣿⡏⠁⠀⠀⢸⣿⡇⠀ ⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⢹⣿⡆⠀⠀⠀⣸⣿⠇⠀ ⠀⠀⠀⠀⠀⠀⠀⢿⣿⣦⣄⣀⣠⣴⣿⣿⠁⠀⠈⠻⣿⣿⣿⣿⡿⠏⠀⠀ ⠈⠛⠻⠿⠿⠿⠿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⢀⠄⠂⠓⠢⢄⡀⢀⠔⠋⠙⢦⡀ ⠀⠀⠀⠀⠘⣇⠀⠀⠀⠀⠀⠉⠀⠀⠀⠀⠀⠀⢸ ⠀⠀⠀⠀⠀⠀⠀⠀⠈⢹⠀⠀⠀⠀⢰⠈⠁ ⢠⡒⠊⡭⠛⠓⠒⠒⠒⢺⡀⠀⠀⠀⣸⠒⠒⠉⠉⠭⢍⡑⠒⢤⣉⣉⡀ ⢸⠉⠢⣌⣑⠒⠲⠤⠤⠤⠉⢉⠩⠭⠤⠤⠤⠤⠐⢒⣈⣀⠤⠚⣧⠀⠀⡇ ⢸⠀⠀⠀⠈⠉⠉⠙⠒⠒⠒⠒⠚⠋⠉⠉⠉⠉⠉⠉⠀⠀⢸⠀⠀⠀⠀⠀⣷ ⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⣿ ⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⡏ ⢸⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⡇ ⢸⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⢸ ⠀⡇⠑⢤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣏⣀⣀⠤⠔⠉ ⢱⠀⠀⠈⠑⠒⠦⠤⠤⢤⠤⢤⠤⠤⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇ ⠙⠒⠒⠖⠒⠒⠒⠒⠉⠀⠸⡄⠀⠀⠀⠀⠀⠀⠀⠀⢀⡎ ⠒⠒⠖⠒⠒⠒⠒ Now there are 0 amogus IMPOSTOR WINS .",
            "url": "https://kinerboi.github.io/myFirstRepopart2/cb/2022/09/07/IterationMiniLab.html",
            "relUrl": "/cb/2022/09/07/IterationMiniLab.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "GUI Interphase GDP shower",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices to find top 3 GDP&#39;s of each region&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Global GDP&quot;); System.out.println(&quot;2 - North America&quot;); System.out.println(&quot;3 - South America&quot;); System.out.println(&quot;4 - Africa&quot;); System.out.println(&quot;5 - Europe-Middle East&quot;); System.out.println(&quot;6 - Central Asia/Caucases&quot;); System.out.println(&quot;7 - Asia-Pacific&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Thank you for using this GUI!&quot;); quit = true; break; case 1: System.out.println(&quot;US - 20.49 trillion dollars&quot;); System.out.println(&quot;China - 13.4 trillion dollars&quot;); System.out.println(&quot;Japan - 4.9 trillion dollars&quot;); break; case 2: System.out.println(&quot;US - 20,412,870 million dollars&quot;); System.out.println(&quot;Canada - 1,798,512 million dollars&quot;); System.out.println(&quot;Mexico - 1,212.831 million dollars&quot;); break; case 3: System.out.println(&quot;Brazil - 1,833,274 million dollars&quot;); System.out.println(&quot;Mexico - 1,322,740 million dollars&quot;); System.out.println(&quot;Argentina - 505,235 million dollars&quot;); break; case 4: System.out.println(&quot;Nigeria - 510.588 trillion dollars&quot;); System.out.println(&quot;Egypt - 435.621 trillion dollars&quot;); System.out.println(&quot;South Africa - 426.166 trillion dollars&quot;); break; case 5: System.out.println(&quot;Germany - 4,256.540 trillion dollars&quot;); System.out.println(&quot;UK - 3,376.003 trillion dollars&quot;); System.out.println(&quot;France - 2,936.702 trillion dollars&quot;); break; case 6: System.out.println(&quot;Azerbaijan - 70.34 billion dollars&quot;); System.out.println(&quot;Georgia - 20.89 billion dollars&quot;); System.out.println(&quot;Armenia - 14.39 billion dollars&quot;); break; case 7: System.out.println(&quot;China - 13.4 trillion dollars&quot;); System.out.println(&quot;Japan - 4.9 trillion dollars&quot;); System.out.println(&quot;India - 8.91 trillion dollars&quot;); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } . Menu.main(null); . - Choose from these choices to find top 3 GDP&#39;s of each region - 1 - Global GDP 2 - North America 3 - South America 4 - Africa 5 - Europe-Middle East 6 - Central Asia/Caucases 7 - Asia-Pacific 0 - Quit - 2: US - 20,412,870 million dollars Canada - 1,798,512 million dollars Mexico - 1,212.831 million dollars .",
            "url": "https://kinerboi.github.io/myFirstRepopart2/2022/09/02/GUI.html",
            "relUrl": "/2022/09/02/GUI.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Innovation - Using Objects Points",
            "content": "Points will be awarded on these three key elements . Code.org  . Individuals show evidence of completing Code.org through Section 15 or beyond. Create a Fastpages blog complete with Screen Grabs that highlight key learnings. . Discuss creating and Using Objects | Discuss extends | . Java Using Objects and PBL design . Background. Build a new Console or Desktop GUI lab showing an area of interest between you and your pair or even as 4s. Focus is using a the Java Math Class, Planning, and Creating. . In planning, the Teacher views Java as a backend language. So, the Console or Desktop UI could be used to serve as an administrative UI for backend developers. | Ultimately, for Trimester 1 N@tM final we will be building a Web frontend using the foundation provide by Fastpages. IMO, the best option for an Administrative UI would be Java using Spring/Spring Boot; but we may need something more rapid and centralized on Java. | . Action. Build a rapid Java based Administrative UI thinking about Math class and Math operations as a focus. A positive, would be starting to build something that you might be interested in for the Trimester N@tM final. - Make a Console application to visualize data from something like Math, Physics, using Jupyter Notebook and Scanner. - Make a Java Swing App and explore making a menu with a couple of unique interfaces showing different types of Math Calculators. - Idea of your choice . Live Grading Presentation.  . Each individual needs to perform their own work. However, I would like to see a plan that show you worked with Pair and/or Team. The presentation can be according to your own style, but consider the following… . Note. A Live Review is expecting students to drive dialog and questions. Additionally, learn that Teacher likes: questions, discussion of failures, showing a progressive mindset. | Individual. Blogging or Issues that highlights key learnings and takeaways from Code.org | Pair/Team. Blogging or Issues that shows Math Library Project / Or Idea of Choice A shared repository, team or pair. My suggestion is using Spring Portfolio project as template, as this is the start to a backend project. In my projects, I have placed “hacks” directory inside of Spring project and it has worked fine. Later you may want to expand on ideas and make them serviceable via APIs. | Issues or Blog that show you have planned to divide up work between pair and team | Jupyter notebook or Posts that highlights key code requirements, consideration should be made to find or run it quickly. | . | Review and Review Ticket. Every time requirements. Create Comment in this Points Blog.  Include crossover grades, crossover comments, and blog(s) used during week. | Be prepared to present fast, be clear, and show everything in under 5 minutes.  3.5 minutes is preferred time for 4 people. | Jupyter Notebooks contain comments and markdown cells that describe work. | Output of Jupyter Notebook is required when posting the Blog. | . | . | .",
            "url": "https://kinerboi.github.io/myFirstRepopart2/points/2",
            "relUrl": "/points/2",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "CSA Alumni Post!",
            "content": "basics . many people only got really into CS and STEM subjects in general once taking STEM classes such as AP CSP and CSA | Comp sci can help with other majors; helps diversify skill set!!! | . Challenges: . starting is the hardest part; everything is confusing at first! keeping motivation is key to excelling, solution to everything | . | EGO CLASH dont worry what other people are doing, learn at your own pace and grow! | . | Dont cut corners just for grade, try to actually learn topic! | . PBL scenarios in College CompSci classes? . In UCSD, one hands-on project as a freshman and again as a senior | Theory is good, but practicallity is neccessary to know | PBL + Tests in UC schooling system | . How have you applied CS in your major if not majoring in CS? . Knowing how to code can help write algorithms to solve problems in major that you need | Can code out a 3D model; dont need a model to automatically print if needed | High level math courses can use help of CS to write algorithms Jupyter notebooks can be used for technical papers and graphs | Statistics and Calculus in particular | . | . For college students, have you have a job with a proffessor or school? . Can have jobs at school, need to submit resume | Can be a TA, intern for proffessor | AP CSA helped man get internship, work hard and take seriously!!! | Jobs at Northrupp Gruman | . Summary . Overall, I enjoyed the presentation. I think a did learn alot about how CS can apply to me in the future, and especially related to Colin, who’s majoring in Mechanical Engineering (a major that I am interested in along with CS and Electrical Engineering) and how he ended up relating the two different STEM topics together in order to set him up for success. I also learned a great deal about intersnhips and clubs in UC schools, and hope to get into an internship in either college or for major industrial manufacturing firms and contractors, one good one in the meeting being mentioned (Northrupp Grumman). Hopefully, when I recieve my greencard, I can go beyond and chase those desires! The meeting was really fun and interesting (especially the jokes the alumni came up with) and for my first meeting this is what I took away from the meeting, that no matter what STEM field you will be in there will still be a use for CS. I hope to participate in more of these meetings in the future! . .",
            "url": "https://kinerboi.github.io/myFirstRepopart2/markdown/2022/08/29/CSAALUMNI1.html",
            "relUrl": "/markdown/2022/08/29/CSAALUMNI1.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Deji finally wins a boxing match!",
            "content": ".",
            "url": "https://kinerboi.github.io/myFirstRepopart2/markdown/2022/08/27/Deji-vs-Fousey.html",
            "relUrl": "/markdown/2022/08/27/Deji-vs-Fousey.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Bash Checks",
            "content": "jupyter kernelspec list conda list java --version javac --version conda --version python3 --version python2 --version . Available kernels: bash /home/kinishs/.local/share/jupyter/kernels/bash java /home/kinishs/.local/share/jupyter/kernels/java javascript /home/kinishs/.local/share/jupyter/kernels/javascript python3 /home/kinishs/.local/share/jupyter/kernels/python3 # packages in environment at /home/kinishs/ENTER: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) javac 11.0.16 conda 4.13.0 Python 3.9.12 Python 2.7.18 . conda list | grep &quot;jupyter&quot; . jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 .",
            "url": "https://kinerboi.github.io/myFirstRepopart2/pbl/2022/08/26/BashCheck.html",
            "relUrl": "/pbl/2022/08/26/BashCheck.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Primitives Farenheit to Celsius to Kelvin calculator",
            "content": "/*Primitives are data types which are the most basic and simple ons in Java. They are meant to *contain simple forms of data, such as numbers and true/false. The main examples of Primitives are booleans, char, int, float, and double. */ //This notebook will contain an example of Primitves being used import java.util.Scanner; public class TempConversions { double celsius = 0; double kelvin = 0; String finalTempsGiven = &quot;These are all the values of given temperature in Farenheit, Celsius, and Kelvin!&quot;; //this string typed up shows the value that all value of temperature are given public void convertTemp(double farenheit, boolean tempInFaren) { if (tempInFaren == true) { celsius = (((farenheit - 32) *5)/9) ; //temperature to convert from farenheit to celsius System.out.println(&quot;The temperature in Farenheit is &quot; + farenheit); System.out.println(&quot;The temperature given in Farenheit, its value in degress Celsius is &quot; + celsius + &quot; degrees Celsius&quot;); //gives temp in fareneheit kelvin = celsius + 273.15; //temperature conversion from celsius to kelvin System.out.println(&quot;The temperature given in Farenheit, its value in degrees Kevlin is &quot; + kelvin + &quot; degrees Kevlin&quot;); //gives temp in kelvin System.out.println(finalTempsGiven); //print string } else { System.out.println(&quot;Error&quot;); //prints error if no } //installation checks } public static void main (String[] args) { boolean tempInFaren = true; //checks whether temperature Scanner input = new Scanner(System.in); System.out.println(&quot;Enter the temperature in Farenheit, because you live in the US!: &quot;); //entering temperature in degrees farenheit double farenheit = input.nextDouble(); //scanning the input System.out.println(&quot;Is the temperature you entered in degrees Farenheit? Input true or false&quot;); //checking whether the value inputed was in farenheit tempInFaren = input.nextBoolean(); //scanning the input TempConversions tempConverter = new TempConversions(); tempConverter.convertTemp(farenheit, tempInFaren); } } . TempConversions.main(null); . Enter the temperature in Farenheit, because you live in the US!: Is the temperature you entered in degrees Farenheit? Input true or false The temperature in Farenheit is 60.0 The temperature given in Farenheit, its value in degress Celsius is 15.555555555555555 degrees Celsius The temperature given in Farenheit, its value in degrees Kevlin is 288.7055555555555 degrees Kevlin These are all the values of given temperature in Farenheit, Celsius, and Kelvin! .",
            "url": "https://kinerboi.github.io/myFirstRepopart2/cb/2022/08/22/Primitives.html",
            "relUrl": "/cb/2022/08/22/Primitives.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Post",
            "content": "Markdown post . toc: true layout: post description: A minimal example of using markdown with fastpages. categories: [markdown] title: An Example Markdown Post .",
            "url": "https://kinerboi.github.io/myFirstRepopart2/2022/08/21/post.html",
            "relUrl": "/2022/08/21/post.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://kinerboi.github.io/myFirstRepopart2/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post27": {
            "title": "Kinishpost",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Kinish First Entry” ] } ], “metadata”: { “kernelspec”: { “display_name”: “Python 3.8.10 64-bit”, “language”: “python”, “name”: “python3” }, “language_info”: { “codemirror_mode”: { “name”: “ipython”, “version”: 3 }, “file_extension”: “.py”, “mimetype”: “text/x-python”, “name”: “python”, “nbconvert_exporter”: “python”, “pygments_lexer”: “ipython3”, “version”: “3.8.10” }, “varInspector”: { “cols”: { “lenName”: 16, “lenType”: 16, “lenVar”: 40 }, “kernels_config”: { “python”: { “delete_cmd_postfix”: “”, “delete_cmd_prefix”: “del “, “library”: “var_list.py”, “varRefreshCmd”: “print(var_dic_list())” }, “r”: { “delete_cmd_postfix”: “) “, “delete_cmd_prefix”: “rm(“, “library”: “var_list.r”, “varRefreshCmd”: “cat(var_dic_list()) “ } }, “types_to_exclude”: [ “module”, “function”, “builtin_function_or_method”, “instance”, “_Feature” ], “window_display”: false }, “vscode”: { “interpreter”: { “hash”: “916dbcbb3f70747c44a77c7bcd40155683ae19c65e1c03b4aa3499c5328201f1” } } }, “nbformat”: 4, “nbformat_minor”: 4 } .",
            "url": "https://kinerboi.github.io/myFirstRepopart2/2020/02/20/kinishpost.ipynb",
            "relUrl": "/2020/02/20/kinishpost.ipynb",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post28": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://kinerboi.github.io/myFirstRepopart2/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://kinerboi.github.io/myFirstRepopart2/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
      ,"page7": {
          "title": "To Do List for school",
          "content": "&lt;!DOCTYPE html&gt; . FIFA World Cup 2022 . Add Task . .",
          "url": "https://kinerboi.github.io/myFirstRepopart2/todo",
          "relUrl": "/todo",
          "date": ""
      }
      
  

  
  

  
  

  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://kinerboi.github.io/myFirstRepopart2/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}